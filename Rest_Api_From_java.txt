public static String invoke(String methodType,String url,Hashtable parameters,Hashtable scopeCredentials,String authName,String authValue)
	 {
		HttpMethod method;
		int httpSocketTimeOut=30000;
		int httpConnectionTimeOut = 3000;
		HttpClient client = new HttpClient();
		client.getHttpConnectionManager().getParams().setConnectionTimeout(httpConnectionTimeOut);
		client.getHttpConnectionManager().getParams().setSoTimeout(httpSocketTimeOut);
		//client.getHostConfiguration().setProxy("192.168.65.13", 3128);//no i18n
		if(CtiApiUtil.checkNotNull(scopeCredentials))
		{
			setAuthScopeCredentials(client, scopeCredentials);
		}
		String readline="";
		if(methodType.equals(GET) || methodType.equals("GET") )
		{
			method = new GetMethod(url);
			method.setFollowRedirects(true);
		}
		else if(methodType.equals(DELETE) || methodType.equals("DELETE") )
		{
			method = new DeleteMethod(url);
		}
		else
		{
			method = new PostMethod(url);
		}
		method.addRequestHeader("Content-type","application/x-www-form-urlencoded;charset=UTF-8");//no i18n
		method.addRequestHeader( "Connection" , "close" );//no i18n
		if(CtiApiUtil.checkNotNull(authValue) && CtiApiUtil.checkNotNull(authName))
		{
			method.addRequestHeader(authValue , authName );
		}
		method.getParams().setContentCharset("UTF-8");//no i18n
		if( CtiApiUtil.checkNotNull(parameters) )
		{
			for (Object parameter : parameters.keySet()) 
			{
				String paramName = (String) parameter;
				String paramVal =(String) parameters.get(paramName);
				addParameter(method,paramName,paramVal);
			}
		}
		try
		{ 
			client.executeMethod(method);
//			BufferedReader br=new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream()));
//			readline=br.readLine();
			StringBuilder sb = new StringBuilder();
			String line = null;
			BufferedReader rd = new BufferedReader(new InputStreamReader(method.getResponseBodyAsStream()));
			while ((line = rd.readLine()) != null)
			{
				sb.append(line + '\n');
			}
			rd.close();
			readline = sb.toString();
			
		}catch (Exception e) {
			LOGGER.log(Level.WARNING,"CtiApiBeanUtil invoke error"+e);
		}
		finally
		{
			method.releaseConnection();
		}
		return readline;
	 }
	 
	 private static void setAuthScopeCredentials(HttpClient client , Hashtable scopeCredentials)
	{
		try
		{
			String host = (String) (CtiApiUtil.checkNotNull(scopeCredentials.get(HOST)) ? scopeCredentials.get(HOST) : null) ;
			Integer port = Integer.parseInt( (CtiApiUtil.checkNotNull(scopeCredentials.get(PORT)) ? scopeCredentials.get(PORT)+"" : "0") );
			String username = (String) (CtiApiUtil.checkNotNull(scopeCredentials.get(USERNAME)) ? scopeCredentials.get(USERNAME) : null) ;
			String password = (String) (CtiApiUtil.checkNotNull(scopeCredentials.get(PASSWORD)) ? scopeCredentials.get(PASSWORD) : null) ;
			if(host !=null && port !=0 && username != null && password !=null)
			{
				//set authentication credentials
				client.getState().setCredentials( new AuthScope(host,port), new UsernamePasswordCredentials(username, password));
			}
		}
		catch (Exception e)
		{
			LOGGER.log(Level.WARNING,"setAuthScopeCredentials error check host,port,username,password "+e);
		}
		
	}
	 
	 
	 private static void addParameter(HttpMethod method,String name, String value){
		if(GET.equals(method.getName())){
			if(value != null){
				try{
					value = URLEncoder.encode(value,"UTF-8");//no i18n
				}catch(UnsupportedEncodingException e){
					LOGGER.log(Level.WARNING,"ctiapibeanutil addparameter error"+e);
				}
			}
			String queryString = method.getQueryString();
			if(queryString != null)
			{
				queryString = buildString(queryString, "&", name, "=", value);
			}
			else
			{
				queryString = buildString("?", name, "=", value);
			}
			method.setQueryString(queryString);
		}else{
			((PostMethod)method).addParameter(name, value);
		}
	}
