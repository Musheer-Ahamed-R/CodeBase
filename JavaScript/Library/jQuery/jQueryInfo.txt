jQuery   -  -> jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation,
               event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.

Advantages of jQuery -  -> It is Cross-Browser.
                        -> It is easier to use than Native JavaScript.
                        -> It is Extensible.
                        -> Simplifies and has Rich AJAX Support.
                        -> It has Large Development Community and Many Plugins.

Notes :
      -> $ is a shortcut for jQuery Object.

CDN                  -  -> Content Delivery Network(CDN) is a System of Distributed Servers that host resources such as Images, CSS, JavaScript Files etc..
                        -> Benefits of Using CDN   -
                              -> Distributed CDN Servers -  -> The jQuery file can be Downloaded from the CDN Server that is Closest to the User.
                              -> Browser Caching         -  -> If a User visits a Web Page that loads jQuery from a CDN Server, the Browser automatically Caches the File,
                                                               Thus, if he visits our website, the jQuery file NEED NOT be download it again.
                              -> Parallel Downloads      -  -> Escapes Parallel Download Restriction on a Domain.
                              -> Reduced Server Load     -  -> No Page Load will make a jQuery File request to our Server.
                        -> Disadvantages                 -  -> Our Client/Users Firewall may block the CDN. So, we may have to request to Whitelist the CDN.
                        Notes :
                           -> In case of any Failure to load jQuery from the CDN, we have to gracefully switch back to loading jQuery from our Server itself.

Additional Notes
   -> function -  -> Receives the index position of the element in the set and the old value(that will be returned by the Outer Function(e.g html() etc..)) / Elements as arguments(index because set is done on all the Set Elements(i.e) Not the First one).
                  -> We can use the old value argument to reference the previous content.
                  -> Within the function, "this" refers to the current element in the set.
                  Declaration
                        Function( Integer index, Element element )

jQuery Functions     -
      -> .ready()    -  -> This method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes SAFE to manipulate/the DOM is fully loaded.
                        -> This doesn't wait for Images, CSS, Frames to be Fully Loaded.
                        Syntax                                 Returns
                           $( document ).ready( handler )      jQuery
                           $( handler )      // Preferred      jQuery
                           $().ready( handler )                jQuery

      -> .load()     -  -> The load event is sent to an element when it and all sub-elements have been COMPLETELY loaded.
                        -> This event fires after the "ready" Event.
                        -> This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the window object.
                        -> In general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually
                           best to place it in a handler sent to the .ready() method.
                        -> This is removed in Version 3.0.
                        Syntax                                 Returns     Notes
                           .load( handler )                    jQuery
                           .load( [eventData ], handler )      jQuery      eventData is an object containing data that will be passed to the event handler.

      -> .click()    -  -> Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
                        Syntax                                 Returns     Notes
                           .click( handler )                   jQuery
                           .click( [eventData ], handler )     jQuery      eventData is an object containing data that will be passed to the event handler.
                           .click()                            jQuery      Trigger a Click Event

      -> .css()      -  -> Get the value of a computed style property for the FIRST element in the set of matched elements or set one or more CSS properties for every matched element.
                        -> This accepts RELATIVE values similar to .animate(). Relative values are a string starting with += or -= to increment or decrement the current value. based on its previous values.
                        Syntax                                 Returns     Notes
                           .css( propertyName )
                              .css( propertyName )             String
                              .css( propertyNames )            String      propertyNames is an Array of one or more CSS properties.
                           .css( propertyName, value )
                              .css( propertyName, value )      jQuery
                              .css( propertyName, function )   jQuery      A function returning the value to set.
                              .css( properties )               jQuery      properties is an Object containing list of propertyName and Value.

      -> .hover()    -  -> Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
                        -> The .hover() method binds handlers for both mouseenter and mouseleave events.
                        -> $( selector ).hover( handlerIn, handlerOut ) is shorthand for: $( selector ).mouseenter( handlerIn ).mouseleave( handlerOut );
                        -> Also $(selector).hover(handlerInOut) is shorthand for $( selector ).on( "mouseenter mouseleave", handlerInOut );
                        Syntax                                 Returns     Notes
                        .hover( handlerIn, handlerOut )
                           .hover( handlerIn, handlerOut )     jQuery      handlerIn      - A function to execute when the mouse pointer enters the element.
                                                                           handlerOut     - A function to execute when the mouse pointer leaves the element.
                        .hover( handlerInOut )
                           .hover( handlerInOut )              jQuery      handlerInOut   - A function to execute when the mouse pointer enters or leaves the element.

      -> .mouseenter()  -> Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
                        -> This method is a shortcut for .on( "mouseenter", handler ) in the first two variations, and .trigger( "mouseenter" ) in the third.
                        Syntax                                 Returns
                           .mouseenter( handler )              jQuery
                           .mouseenter( [eventData ], handler) jQuery
                           .mouseenter()

      -> .html()     -  -> Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.
                        -> This method uses the browser's innerHTML property.
                        -> Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content.
                        -> In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document
                           as a result of the operation. If we are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string)
                           so that the elements are removed from the document before the new string is assigned to the element.
                        Syntax                                 Returns     Notes
                        .html()
                           .html()                             String
                        .html( htmlString )
                           .html( htmlString )                 jQuery
                           .html( function )                   jQuery      A function returning the HTML content to set.

      -> .attr()     -  -> Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.
                        -> To retrieve and change DOM properties such as the checked, selected, or disabled, selectedIndex, tagName, nodeName, nodeType, ownerDocument,
                           defaultChecked, and defaultSelectedstate of form elements, use the .prop() method.
                        -> The .prop() method provides a way to explicitly retrieve property values, while .attr() retrieves attributes.
                        -> The most important concept to remember about the checked attribute is that it does not correspond to the checked property. The attribute actually corresponds
                           to the defaultChecked property and should be used only to set the initial value of the checkbox. The checked attribute value does not change with the state of the checkbox,
                           while the checked property does.
                        Syntax                                 Returns
                        .attr( attributeName )                 String
                           .attr( attributeName )
                        .attr( attributeName, value )          jQuery
                           .attr( attributeName, value )
                           .attr( attributes )
                           .attr( attributeName, function )

      -> .removeAttr()  -> Remove an attribute from each element in the set of matched elements.
                        Syntax                                 Returns
                           .removeAttr( attributeName )        jQuery

      -> .val()      -  -> Get the current value of the first element in the set of matched elements or set the value of every matched element.
                        -> This method is primarily used to get the values of FORM ELEMENTS such as input, select and textarea.
                        -> This method returns the VALUE PROPERTY and not the VALUE ATTRIBUTE.
                        -> When the first element in the collection is a select-multiple (i.e., a select element with the multiple attribute set), .val() returns an array
                           containing the value of each selected option.
                        -> This allows us to pass an ARRAY(Not a String) of element values, which is useful when working on a jQuery object containing elements like <input type="checkbox">, <input type="radio">,
                           and <option>s inside of a <select>. If the element value matches with the value we wanted to set, then it is Selected/Checked
                        Syntax                                 Returns                       Notes
                        .val()                                 String or Number or Array
                           .val()
                        .val( value )                          jQuery
                           .val( value )                                                     A string of text, a number, or an array of strings corresponding
                                                                                             to the value of each matched element to set as selected/checked.
                           .val( function )

                        Notes :
                           -> At present, using .val() on <textarea> elements strips carriage return characters from the browser-reported value.
                              When this value is sent to the server via XHR, however, carriage returns are preserved (or added by browsers which do not include them in the raw value).
                              A Work around in specified in the Documentation.
                           -> Setting values using this method (or using the native value property) does not cause the dispatch of the change event. For this reason,
                              the relevant event handlers will not be executed. If you want to execute them, you should call .trigger( "change" ) after setting the value.
                           -> If we pass a String it assigns the Value to the element(except incase of Select where it matches the Existing Values). But, if we pass an ARRAY,
                              this method matches the values of each element with values in the Array, and then Selects/Checks the Elements if present(except incase of input[type=text] elements).

      -> .prop()     -  -> Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.
                        -> Elements can have properties such as the checked, selected, or disabled, selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, and defaultSelectedstate
                        -> I can have have my own CUSTOM PROPERTIES SET on an Element. (e.g. .prop( "luggageCode", 1234 ) )
                        Syntax                                 Returns
                        .prop( propertyName )                  Anything
                           .prop( propertyName )
                        .prop( propertyName, value )           jQuery
                           .prop( propertyName, value )
                           .prop( properties )
                           .prop( propertyName, function )

      -> .removeProp()  -> Remove a property for the set of matched elements.
                        -> The .removeProp() method removes properties set by the .prop() method.
                        -> Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and,
                           once removed, cannot be added again to element. Use .prop() to set these properties to false instead.

      -> .each()     -  -> It iterates over the DOM elements that are part of the jQuery object, executing a function for each matched element.
                        -> Most jQuery methods that return a jQuery object also loop through the set of elements in the jQuery collection — a process known as implicit iteration.
                           When this occurs, it is often unnecessary to explicitly iterate with the .each() method:
                        -> We can stop the loop from within the callback function by returning false(NOT undefined or null).
                        Syntax                                 Returns
                           .each( function )                   jQuery

      -> .text()     -  -> Get the combined text contents of each element in the SET of MATCHED elements, including their Descendants, or set the text contents of the matched elements.
                        -> The .text() method cannot be used on form inputs or scripts. To set or get the text value of input or textarea elements, use the .val() method. To get the value of a script element, use the .html() method.
                        Syntax                                 Returns     Notes
                           .text()
                              .text()                          String
                           .text( text )
                              .text( text )                    jQuery
                              .text( function )                jQuery      A function returning the text content to set

      -> .filter()   -  -> Reduce the set of matched elements to those that match the selector or pass the function's test.
                        Syntax                                 Returns     Notes
                           .filter( selector )                 jQuery      A string containing a selector expression to match the current set of elements against.
                           .filter( function )                 jQuery      A function used as a test for each element in the set. The Function returns Boolean.
                           .filter( elements )                 jQuery      One or more DOM elements to match the current set of elements against.
                           .filter( selection )                jQuery      An existing jQuery object to match the current set of elements against.

      -> .contents() -  -> This method allows us to search through the IMMEDIATE Children of all the matched elements in the DOM tree and construct a new jQuery object from the matching elements.
                        -> The .contents() and .children() methods are similar, except that the former includes text nodes and comment nodes as well as HTML elements in the resulting jQuery object.
                        -> Most jQuery operations don't support text nodes and comment nodes. The few that do will have an explicit note on their API documentation page.
                        -> The .contents() method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.
                        Syntax                                 Returns
                           .contents()                         jQuery

      -> .children() -  -> Get the IMMEDIATE Children of each element in the set of matched elements, optionally filtered by a selector.
                        -> The .children() method differs from .find() in that .children() only travels a SINGLE LEVEL down the DOM tree while .find() can traverse down multiple levels
                           to select descendant elements (grandchildren, etc.) as well.
                        -> Note also that like most jQuery methods, .children() does not return text nodes; to get all children including text and comment nodes, use .contents().
                        Syntax                                 Returns     Notes
                           .children( [selector ] )            jQuery      The Selector should be the Direct Child of the main Element and not the Main Element Itself.

      -> .find()     -  -> Get the DESCENDANTS of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
                        -> The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree.
                        -> Unlike most of the tree traversal methods, the selector expression is required in a call to .find(). If we need to retrieve all of the descendant elements,
                           we can pass in the universal selector '*' to accomplish this.
                        Syntax                                 Returns     Notes
                           .find( selector )                   jQuery      The Selector should be the Descendant of the main Element and not the Main Element Itself.
                           .find( element )                    jQuery      The Element should be the Descendant of the main Element and not the Main Element Itself.

      -> .parent()   -  -> This method traverses to the IMMEDIATE Parent(optionally filtered by a selector) of each of these elements in the DOM tree
                           and constructs a new jQuery object from the matching elements.
                        -> This method is similar to .parents(), except .parent() only travels a Single level up the DOM tree. Also, $( "html" ).parent() method
                           returns a set containing document whereas $( "html" ).parents() returns an empty set.
                        -> If the Parent Element does not match the Selector(if provided), then it is IGNORED.(i.e The method DOES NOT Traverse to the Next Level to find its Ancestor).
                        Syntax                                 Returns     Notes
                           .parent( [selector ] )              jQuery      A string containing a selector expression to match elements against.

      -> .parents()  -  -> Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
                        -> This method allows us to search through the ALL the Ancestors of these elements in the DOM tree and construct a new jQuery object
                           from the matching elements ordered from immediate parent on up.
                        -> The elements are returned in order from the closest parent to the outer ones. When multiple DOM elements are in the original set,
                           the resulting set will be in reverse order of the original elements as well, with duplicates removed.
                        Syntax                                 Returns
                           .parents( [selector ] )             jQuery

      -> .closest()  -  -> For each element in the set, gets the first element that matches the selector by starting from the ELEMENT ITSELF and traversing up through its ancestors in the DOM tree.
                        -> The .parents() and .closest() methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:
                                       .closest()	                                                                      .parents()
                              -> Begins with the current element	                                            Begins with the parent element
                              -> Travels up the DOM tree until it finds a match for the supplied selector     Travels up the DOM tree to the document's root element, adding each ancestor element to a
                                                                                                              temporary collection; it then filters that collection based on a selector if one is supplied
                              -> The returned jQuery object contains zero or one element 	                    The returned jQuery object contains zero or more elements
                                 for each element in the original set, in document order                      for each element in the original set, in reverse document order
                        Syntax                                 Returns     Notes
                        .closest( selector )
                           .closest( selector )                jQuery
                           .closest( selector [, context ] )   jQuery      context - A DOM element within(limit) which a matching element may be found(It Does not Traverse the (Other)Children of the Context).
                                                                           This is used to find an Element Within a Given Context.
                           .closest( selection )               jQuery
                           .closest( element )                 jQuery
                        .closest( selectors [, context ] )                 Removed in jQuery 1.8
                           .closest( selectors [, context ] )  Array

      -> .remove()   -  -> Remove the set of matched elements from the DOM.
                        -> Similar to .empty(), except that .remove() also removes the element itself.
                        -> In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed.
                        -> To remove the elements without removing data and events, use .detach() instead(so they can be RE-ADDED later).
                        Syntax                                 Returns     Notes
                           .remove( [selector ] )              jQuery      The Selector should be the MAIN Element amongst the List and NOT a Child of that Main Element.

      -> .empty()    -  -> Remove all child nodes of the set of matched elements from the DOM.
                        -> This method removes not only child (and other descendant) elements, but also any text within the set of matched elements.
                        -> To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.
                        Syntax                                 Returns
                           .empty()                            jQuery

      -> .detach()   -  -> Remove the set of matched elements from the DOM.
                        -> The .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements.
                        -> This method is useful when removed elements are to be reinserted into the DOM at a later time.
                        Syntax                                 Returns     Notes
                           .detach( [selector ] )              jQuery      The Selector should be the MAIN Element amongst the List and NOT a Child of that Main Element.

      -> .change()   -  -> Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
                        -> This method is a shortcut for .on( "change", handler ) in the first two variations, and .trigger( "change" ) in the third.
                        -> The change event is sent to an element when its value changes. This event is limited to <input> elements, <textarea> boxes and <select> elements.
                        -> For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types
                           the event is deferred until the element loses focus.
                        -> To trigger the event manually, apply .change() without arguments.
                        -> Changing the value of an input element using JavaScript, using .val() for example, won't fire the event.
                        Syntax                                 Returns
                           .change( handler )                  jQuery
                           .change( [eventData ], handler )    jQuery
                           .change()                           jQuery

      -> .slideUp()  -  -> Hide the matched elements with a sliding motion.
                        -> The .slideUp() method animates the height of the matched elements. This causes lower parts of the page to slide up,
                           appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is),
                           the display style property is set to none to ensure that the element no longer affects the layout of the page.
                        Syntax                                             Returns     Notes
                           .slideUp([duration] [, complete])               jQuery
                           .slideUp( options )                             jQuery      options - Plain Object. Refer Documentation for other Properties.
                           .slideUp([duration][, easing][, complete])      jQuery

      -> .slideDown()   -> Display the matched elements with a sliding motion.
                        -> The .slideDown() method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.
                        Syntax                                             Returns     Notes
                           .slideDown([duration][, complete])              jQuery
                           .slideDown( options )                           jQuery      options - Plain Object. Refer Documentation for other Properties.
                           .slideDown([duration][, easing][, complete])    jQuery

                        Notes
                           -> complete - A function to call once the animation is complete, called ONCE PER MATCHED Element.
                           -> 'fast' - 200 and 'slow' - 600 milliseconds. default is 400 milliseconds.

      -> .slideToggle() -> Display or hide the matched elements with a sliding motion.
                        -> The .slideToggle() method animates the height of the matched elements. This causes lower parts of the page to slide up or down,
                           appearing to reveal or conceal the items.
                        Syntax
                           .slideToggle([duration][, complete])
                           .slideToggle( options )
                           .slideToggle([duration][, easing][, complete])

      -> jQuery.each()  -> A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property
                           (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
                        -> The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object.
                        -> The $.each() function can be used to iterate over any collection, whether it is an object or an array(but not a jQuery Object).
                        -> The value can also be accessed through the "this" keyword(in each iteration), but Javascript will always wrap the this value as an Object even if it is a simple string or number value.)
                        -> This Also iterates Over the INHERITED PROPERTIES(Normal).
                        -> We can break the $.each() loop at a particular iteration by making the callback function return false. Returning non-false is the same as a continue statement
                           in a for loop; it will skip immediately to the next iteration.
                        Syntax                                 Returns     Notes
                           jQuery.each( array, callback )      jQuery      Function( Integer indexInArray, Object value ), The function that will be executed on every object.
                           jQuery.each( object, callback )     jQuery      Function( String propertyName, Object valueOfProperty ), The function that will be executed on every object.
                        Notes :
                           -> The $.each() function internally retrieves and uses the length property of the passed collection. So, if the collection has a property called length
                              e.g. {bar: 'foo', length: 10} — the function might not work as expected.

      -> .addClass() -  -> Adds the specified class(es) to each element in the set of matched elements.
                        -> This method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.
                        Syntax                                 Returns
                           .addClass( className )              jQuery
                           .addClass( function )               jQuery

      -> .toggleClass() -> Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
                        -> As of jQuery 1.4, if no arguments are passed to .toggleClass(), all class names on the element the first time .toggleClass() is called will be toggled.
                        Syntax                                 Returns     Notes
                        .toggleClass( className )              jQuery
                           .toggleClass( className )
                           .toggleClass( className, state )                state - A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.
                           .toggleClass( function [, state ] )
                        .toggleClass( [state ] )               jQuery      Deprecated
                           .toggleClass( [state ] )

      -> .hasClass() -  -> Determine whether any of the matched elements are assigned the given class.
                        Syntax                                 Returns
                           .hasClass( className )              jQuery


      -> .removeClass() -> Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
                        -> If no class names are specified in the parameter, all classes will be removed.
                        -> To replace all existing classes with another class, we can use .attr( "class", "newClass" ) instead.
                        Syntax                                 Returns
                           .removeClass( [className ] )        jQuery
                           .removeClass( function )            jQuery

      -> .scrollTop()   -> Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar
                           for every matched element.
                        -> The vertical scroll position is the same as the number of pixels that are HIDDEN from view above the scrollable area. If the scroll bar is at the very top,
                           or if the element is not scrollable, this number will be 0.
                        Syntax                                 Returns
                        .scrollTop()                           Number
                           .scrollTop()
                        .scrollTop( value )                    jQuery
                           .scrollTop( value )

      -> .scrollLeft()  -> Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar
                           for every matched element.
                        -> The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left,
                           or if the element is not scrollable, this number will be 0.
                        Syntax                                 Returns
                           .scrollLeft()                       Integer
                              .scrollLeft()
                           .scrollLeft( value )                jQuery
                              .scrollLeft( value )

                        Note  :
                           -> .scrollLeft(), when called directly or animated as a property using .animate(), will not work if the element it is being applied to is hidden.

      -> .height()   -  -> Get the current computed height for the first element in the set of matched elements or set the height of every matched element.
                        -> The difference between .css( "height" ) and .height() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value
                           with units intact (for example, 400px).
                        -> The .height() method is recommended when an element's height needs to be used in a mathematical calculation.
                        -> Height Property of an Element "NORMALLY" DOES NOT INCLUDE Padding or Border or Margin of that Element.
                        -> The .height() will always return the content height, regardless of the value of the CSS box-sizing property. To avoid this penalty,
                           use .css( "height" ) rather than .height(), in this case.
                        Syntax                                 Returns
                        .height()                              Number
                           .height()
                        .height( value )                       jQuery
                           .height( value )
                           .height( function )

                        Notes :
                           -> The "box-sizing" property is used to tell the browser what the sizing properties (width and height) should include(like padding, border etc..).
                           -> Although style and script tags will report a value for .width() or height() when ABSOLUTELY positioned and given display:block,
                              it is STRONGLY DISCOURAGED to call those methods on these tags. In addition to being a bad practice, the results may also prove unreliable.
                           -> The number returned by dimensions-related APIs, including .height(), may be fractional in some cases. Code should not assume it is an integer.
                              Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.
                           -> The value reported by .height() is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value,
                              ensure the element is visible before using .height(). jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions,
                              but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed
                              in a future version of jQuery.

      -> .innerHeight() -> Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height
                           of every matched element.
                        -> This method returns the height of the element, including top and bottom padding, in pixels.
                        -> This method is not applicable to window and document objects. For these, use .height() instead.
                        -> When the Inner Height is SET, it is ADJUSTED from the ACTUAL HEIGHT(i.e Padding is not changed).
                        Syntax                                 Returns
                           .innerHeight()                      Number
                                .innerHeight()
                           .innerHeight( value )               jQuery
                                .innerHeight( value )
                                .innerHeight( function )

      -> .outerHeight() -> Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin
                           or set the CSS outer Height of each element in the set of matched elements.
                        -> Returns a number (without "px") representation of the value or null if called on an empty set of elements.
                        -> The top and bottom padding and border are always included in the .outerHeight() calculation; if the includeMargin argument is set to true,
                           the margin (top and bottom) is also included.
                        -> When the Outer Height is SET, it is ADJUSTED from the ACTUAL HEIGHT(i.e Padding/Border is not changed).
                        Syntax                                          Returns
                           .outerHeight( [includeMargin ] )             Number
                              .outerHeight( [includeMargin ] )
                           .outerHeight( value )                        jQuery
                              .outerHeight( value )
                              .outerHeight( function(index, height) )

      -> .width()    -  -> Get the current computed width for the first element in the set of matched elements or set the width of every matched element.
                        -> The difference between .css(width) and .width() is that the latter returns a unit-less pixel value (for example, 400) while the former
                           returns a value with units intact (for example, 400px).
                        -> The .width() method is recommended when an element's width needs to be used in a mathematical calculation.
                        -> WIDTH Property of an Element "NORMALLY" DOES NOT INCLUDE Padding or Border or Margin of that Element.
                        -> The .width() will always return the content height, regardless of the value of the CSS box-sizing property. To avoid this penalty,
                           use .css( "width" ) rather than .width(), in this case.
                        Syntax                                 Returns
                           .width()                            Number
                              .width()
                           .width( value )                     jQuery
                              .width( value )
                              .width( function )
                        Notes :
                           -> Same as for .height()

      -> .innerWidth()  -> Get the current computed inner width (including padding but not border) for the first element in the set of matched elements
                           or set the inner width of every matched element.
                        -> This method returns the width of the element, including top and bottom padding, in pixels.
                        -> This method is not applicable to window and document objects. For these, use .width() instead.
                        -> When the Inner Width is SET, it is ADJUSTED from the ACTUAL WIDTH(i.e Padding is not changed).
                        Syntax                                 Returns
                           .innerWidth()                       Number
                                .innerWidth()
                           .innerWidth( value )                jQuery
                                .innerWidth( value )
                                .innerWidth( function )

      -> .outerWidth()  -> Get the current computed width for the first element in the set of matched elements, including padding, border, and optionally margin
                           or set the CSS outer width of each element in the set of matched elements.
                        -> Returns a number (without "px") representation of the value or null if called on an empty set of elements.
                        -> The top and bottom padding and border are always included in the .outerWidth() calculation; if the includeMargin argument is set to true,
                           the margin (top and bottom) is also included.
                        -> When the Outer WIDTH is SET, it is ADJUSTED from the ACTUAL WIDTH(i.e Padding/Border is not changed).
                        -> Although .outerWidth() can be used on table elements, it may give unexpected results on tables using the border-collapse : collapse CSS property.
                        Syntax                                          Returns
                           .outerWidth( [includeMargin ] )              Number
                              .outerWidth( [includeMargin ] )
                           .outerWidth( value )                         jQuery
                              .outerWidth( value )
                              .outerWidth( function(index, height) )

      -> .after()    -  -> Insert content, specified by the parameter, after each element in the set of matched elements.
                        -> The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax—specifically, in the placement of
                           the content and target. With .after(), the content to be inserted comes from the method's argument(e.g $(target).after(contentToBeInserted)),
                           but with .insertAfter(), on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the
                           .insertAfter() method's argument(e.g. $(contentToBeInserted).insertAfter(target)).
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.
                        -> This returns the ORIGINAL UNMODIFIED set as retrieved by the Selector(Syntactically before .after()), unlike insertAfter.
                        Syntax                                 Returns     Notes
                           .after(content [, content])         jQuery      content - htmlString or Element or Text or Array or jQuery
                           .after( function )                  jQuery      function - Function( Integer index ) => htmlString or Element or Text or jQuery
                           .after( function-html )             jQuery      function-html - Function( Integer index, String html ) => htmlString or Element or Text or jQuery

                        Notes :
                           -> By design, any jQuery constructor or method that accepts an HTML string — jQuery(), .append(), .after(), etc. — can potentially execute code.
                              This can occur by injection of script tags or use of HTML attributes that execute code (for example, <img onload="">). Do not use these methods
                              to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS)
                              vulnerabilities. Remove or escape any user input before adding content to the document.

      -> .insertAfter() -> Insert every element in the set of matched elements after the target.
                        -> The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target.
                           With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If an element selected from DOM is inserted into a single location elsewhere in the DOM, it will be MOVED after the target (not cloned) and a
                           NEW set consisting of the INSERTED ELEMENTS is returned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first,
                           and that new set (the original element plus clones) is returned.
                        Syntax                                 Returns
                           .insertAfter( target )              jQuery

      -> .before()   -  -> Insert content, specified by the parameter, before each element in the set of matched elements.
                        -> The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target.
                           With .before(), the content to be inserted comes from the method's argument(e.g. $(target).before(contentToBeInserted)).
                           With .insertBefore(), on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the
                           .insertBefore() method's argument(e.g. $(contentToBeInserted).insertBefore(target)).
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.
                        -> This returns the ORIGINAL UNMODIFIED set as retrieved by the Selector(Syntactically before .before()), unlike insertBefore.
                        Syntax                                 Returns     Notes
                           .before( content [, content ] )     jQuery      content - htmlString or Element or Text or Array or jQuery
                           .before( function )                 jQuery      function - Function( Integer index ) => htmlString or Element or Text or jQuery
                           .before( function-html )            jQuery      function-html - Function( Integer index, String html ) => htmlString or Element or Text or jQuery

      -> .insertBefore()-> Insert every element in the set of matched elements before the target.
                        -> The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target.
                           With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If an element selected from DOM is inserted into a single location elsewhere in the DOM, it will be MOVED before the target (not cloned) and a
                           NEW set consisting of the INSERTED ELEMENTS is returned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first,
                           and that new set (the original element plus clones) is returned.
                        Syntax                                 Returns
                           .insertBefore( target )             jQuery

      -> .append()   -  -> This method inserts the specified content as the LAST child of each element in the jQuery collection
                        -> The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target.
                           With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.
                        -> This returns the ORIGINAL UNMODIFIED set as retrieved by the Selector(Syntactically before .append()).
                        Syntax                                 Returns     Notes
                           .append( content [, content ] )     jQuery      content - htmlString or Element or Text or Array or jQuery
                           .append( function )                 jQuery

      -> .appendTo()    -> Insert every element in the set of matched elements to the end of the target.
                        -> The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target.
                           With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If an element selected from DOM is inserted into a single location elsewhere in the DOM, it will be MOVED as the target's Last Child(not cloned) and a
                           NEW set consisting of the INSERTED ELEMENTS is returned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first,
                           and that new set (the original element plus clones) is returned.
                        Syntax                                 Returns
                           .appendTo( target )                 jQuery

      -> .prepend()  -  -> The .prepend() method inserts the specified content as the FIRST child of each element in the jQuery collection.
                        -> The .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target.
                           With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.
                        -> This returns the ORIGINAL UNMODIFIED set as retrieved by the Selector(Syntactically before .prepend()).
                        Syntax                                 Returns     Notes
                           .prepend( content [, content ] )    jQuery      content - htmlString or Element or Text or Array or jQuery
                           .prepend( function )                jQuery

      -> .prependTo()   -> Insert every element in the set of matched elements to the beginning of the target.
                        -> The .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target.
                           With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand,
                           the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.
                        -> If an element selected from the DOM and passed as an Argument, it will be MOVED(from its Current Location in the DOM) to the target(Irrespective of the Number of targets),
                           rather than cloned.
                        -> If an element selected from DOM is inserted into a single location elsewhere in the DOM, it will be MOVED as the target's First Child(not cloned) and a
                           NEW set consisting of the INSERTED ELEMENTS is returned.
                        -> If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first,
                           and that new set (the original element plus clones) is returned.
                        Syntax                                 Returns
                           .prependTo( target )                jQuery

      -> .wrap()     -  -> Wrap an HTML structure around each element in the set of matched elements.
                        -> The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure.
                        -> This structure may be nested several levels deep, but should contain ONLY ONE inmost element.
                        -> A copy of this structure will be wrapped around each of the elements in the set of matched elements.
                        -> This method returns the original set of elements for chaining purposes.
                        -> If a Html Element(retrieved by the Selector) is specified as a Wrapper Element, that Element is NOT MOVED, but Cloned for each Matching Element.
                        Syntax                                 Returns     Notes
                           .wrap( wrappingElement )            jQuery      wrappingElement - Selector or htmlString or Element or jQuery
                           .wrap( function )                   jQuery

                        Notes :
                           -> The Opening Div(s) Should all be in a Single line for the Wrap function to work properly.

      -> .wrapAll()  -  -> Wrap an HTML structure around all elements in the set of matched elements.
                        -> The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure.
                        -> This structure may be nested several levels deep, but should contain ONLY ONE inmost element.
                        -> All the Elements to be Wrapped around are MOVED together and the Wrapper Element(htmlString) is wrapped around it.
                        -> This method returns the original set of elements for chaining purposes.
                        -> If a Html Element(retrieved by the Selector) is specified as a Wrapper Element, that Element is NOT MOVED, but Cloned.
                        Syntax                                 Returns     Notes
                           .wrapAll( wrappingElement )         jQuery      wrappingElement - Selector or htmlString or Element or jQuery
                           .wrapAll( function )                jQuery

      -> .wrapInner()   -> Wrap an HTML structure around the CONTENTS(HTML Content/Nodes) of each element in the set of matched elements.
                        -> The .wrapInner() function can take any string or object that could be passed to the $() factory function to specify a DOM structure.
                        -> This structure may be nested several levels deep, but should contain only one inmost element.
                        -> A copy of this structure will be wrapped around each of the Contents in the set of matched elements.
                        -> This method returns the original set of elements for chaining purposes.
                        -> If a Html Element(retrieved by the Selector) is specified as a Wrapper Element, that Element is NOT MOVED, but Cloned for each Matching Element.
                        Syntax                                 Returns     Notes
                           .wrapInner( wrappingElement )       jQuery      wrappingElement - Selector or htmlString or Element or jQuery
                           .wrapInner( function )              jQuery
