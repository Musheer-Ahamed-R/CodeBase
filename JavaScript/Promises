Info : 

	-> They aim to solve a lot of problems that come up when we have a lot of asyncronous code in our application.
	-> Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.
	-> This can help us get rid of "classic-callback-pyramid-of-doom".(Nested Hierarchy callbacks)


	-> It contains the code which initiates the async functionality(http request, db request) and also calling of resolve(positive) and reject(negative) functions based on the result of async call.
	-> This is better, bacause it makes the code more composable and readable.

Chaining : 

	-> A common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step("classic-callback-pyramid-of-doom").
	(e.g Loading js files(with dependency) like a hierarchy)
	-> This is accomplished by returning a new promise from either the success or failure callback of the "then" function.
	-> This second promise(returned by "then") represents the completion not just of firstPromise, but also of the successCallback or failureCallback you passed in, which can be other asynchronous functions returning a promise. When that's the case, any callbacks added to promise2 get queued behind the promise returned by either successCallback or failureCallback.(i.e not behind the default promise returned by "then")

Chaining after a catch : 

	-> It's possible to chain after a failure, i.e. a catch, which is useful to 
	   accomplish new actions even after an action failed in the chain.(just like final)


Notes : 

	-> A Function that returns a promise can be used to abstract out 
		-> the ASYNC functionality, 
		-> calling resolve and reject
	   of the Current Promise.
	-> The arguments to then are optional, and catch(failureCallback) is short for 
	   then(null, failureCallback).  This is USEFULL when we want only a single error handling function for a series of promises.   
	-> Basically, a promise chain stops if there's an exception, looking down the chain
	   for catch handlers instead.  
	-> Only the first call to resolve or reject  inside of a promise is considered. Any other sub-sequent calls either same or different will be ignored.   

Advantages : 

	-> Callbacks will never be called before the completion of the current run of the JavaScript event loop.
	-> Callbacks added with .then even after the success or failure of the asynchronous operation, will be called, as above.
	-> Multiple callbacks may be added by calling .then several times, to be executed independently in insertion order.