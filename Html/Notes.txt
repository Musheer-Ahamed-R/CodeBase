1 ->  Always use the HTML coded characters for special characters 
      e.g &#215; for x
2 ->  novalidate HTML attribute is used to disable browser's native FORM validation.

Sample HTML structure for a Web site:
  header: 
    <header>
  navigation bar: 
    <nav>
  main content: 
    <main>, with various content subsections represented by <article>, <section>, and <div> elements.
  sidebar: 
    <aside>. Often placed inside <main>.
  footer: 
    <footer>

Semantic Elements:
  ->  A semantic element clearly describes its meaning to both the browser and the developer.
      e.g <form>, <table>, and <article> - Clearly defines its content. While, <div> and <span> - Tells nothing about its content.
      Note:
        ->  Almost all tags are semantic tags in HTML5

Element Types:
  Block Elements:
    ->  They will appear on a new line from whatever content before it, and any content after it will also appear on a new line.
    ->  A block-level element would NOT be nested inside an INLINE element, but it might be nested inside another block-level element.
  Inline elements:
    ->  They are contained within block-level elements. We CAN'T put block elements inside inline elements. But, it may contain other inline elements.
    ->  They will not cause a new line to appear in the document
    ->  They may or MAY NOT require closing tag. e.g input does not require closing tag, whereas textarea requires closing tag.
        Notes:
          ->  Except <a> element, which may contain block elements within it.
  Empty elements:
    ->  They consist only of a single tag. e.g <br>

Attribute Types:
  Boolean attributes:
    ->  These attributes can be written without values. e.g disabled, required etc..


Inline elements list:
  <a>
  <button>
  <br>
  <i>
  <img>
  <input>
  <iframe>
  <label>
  <noscript>
  <q>
  <script>
  <select>
  <small>
  <span>
  <strong>
  <textarea>
  
  <abbr>
  <acronym>
  <audio> (if it has visible controls)
  <b>
  <bdi>
  <bdo>
  <big>
  <canvas>
  <cite>
  <code>
  <data>
  <datalist>
  <del>
  <dfn>
  <em>
  <embed>
  <ins>
  <kbd>
  <map>
  <mark>
  <meter>
  <object>
  <output>
  <picture>
  <progress>
  <ruby>
  <s>
  <samp>
  <slot>
  <sub>
  <sup>
  <svg>
  <template>
  <time>
  <u>
  <tt>
  <var>
  <video>
  <wbr>

HTML Forms:
  ->  A button can be created either using a <button> element or an <input> element. It's the value of the type attribute that specifies what kind of button is displayed.
      There are some minor differences, like we can have HTML elements in button display text and also value(value="") different than display text in case of <button> element.
  ->  The button element inside of a form element accepts three types(submit, reset, or button). Here, the default value is submit.
  ->  We also need to give a name to our data(i.e input fields). It tells the browser which name to give for each piece of data(input field).
  ->  It's strictly forbidden to nest a form inside another form.
  ->  The <fieldset> element is a used to create groups of widgets that share the same purpose, for styling and semantic purposes.
      Syntax:
        <fieldset>
          <legend>Fruit juice size</legend>
          ...
        </fieldset>
      Note:
        ->  The text content of the <legend> formally describes the purpose of the <fieldset> it is included inside.
        ->  Mostly used with radio buttons(to group them together).
  ->  The input element can be outside of label(<label>) or can be inside of it.
      e.g <label for="username">
            <span>Name:</span>
            <input id="username" type="text" name="username">
            <abbr title="required">*</abbr>
          </label>
  ->  We can suggest values for an input field using the automcomplete(<datalist>) element.
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Autocomplete_box
  ->  It is better to surround a radio/checkbox input fields within li element(i.e ul parent element).
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets#Radio_button
  ->  Need to set the request data to be as `multipart/form-data` if files are being uploaded into form. Otherwise, we can use `application/x-www-form-urlencoded`.

Development Notes:
  ->  Add a <div> element, as a first thing inside of an HTML file(obviously not index.html file)
  ->  To make entire section as clickable for an entity. Wrap all of it inside of an <a> element.(i.e It may also contain div and other block elements)
  ->  Wrap each and every single entity like name, email, phone no inside of a <div> element.
  ->  A new <div> may not necessarily be on a new line. We can use CSS to put it right next to each other.
  ->  If a form has multiple sections, then put each section inside of a seperate <div>. Also, if a form has fields on left and right side(with space in between). 
      Then, the left side will be a seperate <div> and right side will be a seperate div.
      i.e Not necessarily inside of a form. Every where we see a seperate section, wrap it inside of a <div> element.
  ->  Put a label and its input element inside of a <div> element.
  ->  Surround an input element by a label, even though it does not have a label(i.e No label for input element. Managed with input placeholder)
  ->  Surrond a button inside of a <div>
  ->  Radio buttons are usually wrapped inside of <li> elements.
  ->  Whenever there is a list of items for a label(or heading). Use the <li> element, even though it might not be input fields.
      e.g List of contacts.
  ->  If there is a combination of text and its icon/symbol(e.g Logout and its symbol), wrap both the text and its icon inside of a div or a span element.
  ->  It is not necessary that all text be wrapped inside of a <span> element. It may be present without any tag surrounding.
      (i.e has parent <div> element which controls its style)
  ->  Navigation is usually done using <nav> and <li>