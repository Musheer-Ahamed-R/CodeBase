
Stored Procedures -  -> A stored procedure in SQL Server is a group of one or more SQL statements that are executed together.
                     -> Procedures resemble constructs in other programming languages because they can:
                           -> Accept input parameters and return multiple values in the form of output parameters to the calling program.
                           -> Contain programming statements that perform operations in the database. These include calling other procedures.
                           -> Return a status value to a calling program to indicate success or failure (and the reason for failure).
                     -> Stored procedures returns Output parameters,return codes (which are always an integer value), a result set for each SELECT statement contained in the stored procedure or any other stored procedures called by the stored procedure,
                        a global cursor that can be referenced outside the stored procedure.

                     Benefits of Using Stored Procedures -
                           -> Reduced server/client      -     -> The commands in a procedure are executed as a single batch of code.
                              network traffic                  -> This can significantly reduce network traffic between the server and client because only the call to execute the procedure is sent across the network.
                                                               -> Without the code encapsulation provided by a procedure, every individual line of code would have to cross the network.
                           -> Improved performance       -     -> By default, a procedure compiles the first time it is executed and creates an execution plan that is reused for subsequent executions.
                                                                  Since the query processor does not have to create a new plan, it typically takes less time to process the procedure.
                                                               -> If there has been significant change to the tables or data referenced by the procedure, the precompiled plan may actually cause the procedure to perform slower.
                                                                  In this case, recompiling the procedure and forcing a new execution plan can improve performance.
                           -> Reuse of code              -     -> The code for any repetitious database operation is the perfect candidate for encapsulation in procedures.
                                                               -> This eliminates needless rewrites of the same code, decreases code inconsistency, and allows the code to be accessed and executed by any user or application possessing the necessary permissions.
                           -> Stronger security          -     -> Multiple users and client programs can perform operations on underlying database objects through a procedure, even if the users and programs do not have direct permissions
                                                                  on those underlying objects.
                                                               -> The procedure controls what processes and activities are performed and protects the underlying database objects.
                                                               -> This eliminates the requirement to grant permissions at the individual object level and simplifies the security layers.
                                                               -> The EXECUTE AS clause can be specified in the CREATE PROCEDURE statement to enable impersonating another user,
                                                                  or enable users or applications to perform certain database activities without needing direct permissions on the underlying objects and commands.
                                                               -> When calling a procedure over the network, only the call to execute the procedure is visible. Therefore, malicious users cannot
                                                                  see table and database object names, embed Transact-SQL statements of their own, or search for critical data.
                                                               -> Procedures can be encrypted, helping to obfuscate the source code.
                                                               -> Using procedure parameters helps guard against SQL injection attacks. Since parameter input is treated as a literal value and not as executable code,
                                                                  it is more difficult for an attacker to insert a command into the Transact-SQL statement(s) inside the procedure and compromise security.
                           -> Easier maintenance        -      -> When client applications call procedures and keep database operations in the data tier, only the procedures must be updated for any changes in the underlying database.
                                                               -> The application tier remains separate and does not have to know how about any changes to database layouts, relationships, or processes.

                     Limitations                        -      -> Stored procedures cannot be used in Select or Where Clause.

                     Notes :
                       *-> The Stored Procedure can literally be used to perform any Kind of Operation(i.e Having Select Statement(returning Table) or Updating a table or Deleting Table Contents etc..).
                        -> Ad-Hoc Queries can reuse Query Execution Plan, but even a Slightest Change in the Query(e.g. even a Space or Change in parameter Values) can force it to generate a New Execution Plan.
                     Types :
                           -> User-Defined Stored Procedures
                           -> Temporary Stored Procedures
                           -> System Stored Procedures

                           -> User-Defined Stored       -      -> A user-defined procedure can be created in a user-defined database or in all system databases except the Resource database.
                              Procedures                          The procedure can be developed in either Transact-SQL or as a reference to a Microsoft .NET Framework common runtime language (CLR) method.
                                                               -> Use SCHEMABINDING option(Refer Functions).
                                                               -> Return Data       -  -> There are two ways of returning result sets or data from a procedure to a calling program: Output Parameters and Return codes.
                                                                  from Procedure          Returning Data Using an Output Parameter - -> If we specify the OUTPUT keyword for a parameter in the procedure definition, the procedure can return the current value of the parameter
                                                                                                                                        to the calling program when the procedure exits.
                                                                                                                                     -> To save the value of the parameter in a variable that can be used in the calling program, the CALLING program MUST use the OUTPUT keyword
                                                                                                                                        when executing the procedure.
                                                                                                                                     -> Input values can also be specified for OUTPUT parameters when the procedure is executed. This allows the procedure to receive a value
                                                                                                                                        from the calling program, change or perform operations with the value, and then return the new value to the calling program.
                                                                                                                                     Notes :
                                                                                                                                       -> We cannot send back a whole table as an output parameter.
                                                                                                                                       -> Variables/Parameters have an @ prefix before their name.

                                                                                          Returning Data Using a Return Code       - -> A procedure can return an INTEGER value(Only ONE) called a return code to indicate the execution status of a procedure.
                                                                                                                                     -> We specify the return code for a procedure USING the RETURN statement.
                                                                                                                                     -> As with OUTPUT parameters, you must save the return code in a variable when the procedure is executed in order to use the return code value in the calling program.
                                                                                                                                     -> Return codes are commonly used in control-of-flow blocks within procedures to set the return code value for each possible error situation.
                                                                                                                                     -> We can use the @@ERROR function after a Transact-SQL statement to detect whether an error occurred during the execution of the statement.
                                                               Syntax
                                                                  CREATE [ OR ALTER ] { PROC | PROCEDURE } [schema_name.] procedure_name [ ; number ]
                                                                  [ { @parameter [ type_schema_name. ] data_type }
                                                                       [ VARYING ] [ = default ] [ OUT | OUTPUT | [READONLY]
                                                                  ] [ ,...n ]
                                                                  [ WITH <procedure_option> [ ,...n ] ]
                                                                  [ FOR REPLICATION ]
                                                                  AS { [ BEGIN ] sql_statement [;] [ ...n ] [ END ] }
                                                                  [;]

                                                                  <procedure_option> ::=
                                                                  [ ENCRYPTION ]
                                                                  [ RECOMPILE ]
                                                                  [ EXECUTE AS Clause ]

                                                               Notes :
                                                                  -> When we don't specify the names of the Parameters(as used in the Stored Procedure) while Calling it, we have to call the Procedure with arguments in the Same order as Specified.
                                                                     Otherwise, Order of the Arguments is not required.

                           -> Temporary                 -      -> Temporary procedures are a form of user-defined procedures. The temporary procedures are like a permanent procedure, except temporary procedures are stored in tempdb.
                                                               -> There are two types of temporary procedures:
                                                                     -> Local    -     -> Local temporary procedures have a single number sign (#) as the first character of their names; they are visible only to the current user connection,
                                                                                          and they are deleted when the connection is closed
                                                                     -> Global   -     -> Global temporary procedures have two number signs (##) as the first two characters of their names; they are visible to any user after they are created,
                                                                                          and they are deleted at the end of the last session using the procedure.
                           -> System                    -      -> System procedures are included with SQL Server. They are physically stored in the internal, hidden Resource database and logically appear in the sys schema of every system- and user-defined database.
                                                               -> In addition, the msdb database also contains system stored procedures in the dbo schema that are used for scheduling alerts and jobs.
                                                               -> Because system procedures start with the prefix sp_, we recommend that you do not use this prefix when naming user-defined procedures.
                                                               -> SQL Server supports the system procedures that provide an interface from SQL Server to external programs for various maintenance activities. These extended procedures use the xp_ prefix.
