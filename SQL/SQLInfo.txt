Database Server -

      Database Server is a Software Application that Contains Databases, Schemas, Tables, Triggers, Views, Indexes, Stored Procedures, Functions etc..

Types of Database Management System(Server) :

      1 -> Flat File Database
            -> A Single large Table.

      2 -> Relational Database
            -> Hierarchical Database
                     -> Folder Structure, One to One Relationship(i.e Employee reporting to a Single Manager(Parent).
                     -> A Folder/File is related to a Single Folder.
            -> RDBMS (Relational DBMS)
                     -> One to Many Relationship(i.e Employee reporting to a Multiple Managers).
                     -> A Table can be related to any other Table in a Database.
                     -> e.g SQL Server, MySQL, Oracle
            -> ORDBMS (Object-Relational DBMS)
                     -> e.g Postgres
            -> NEWSQL
                     -> Provides the Same Scalable Performance of NoSQL System for OLTP(Online Transaction Processing), while maintaining the ACID
                        guarantees of a Traditional Database System.
                     -> e.g Clustrix, NuoDB, MemSQL, Elastic Database, VoltDB, Google Spanner.

      3 -> NoSQL Database (Lacks in ACID test)
            -> Key-Value Database
                     -> e.g Amazon DynamoDB, Oracle Berkeley Db, Redis
            -> Graph Database
                     -> e.g Neo4j, infiniteGraph, Sones
            -> Column Database
                     -> e.g HBASE, Riak, Cassandra
            -> Document Database
                     -> Nested form of Key-Value database(JSON Structured)
                     -> e.g CouchDB, MongoDB, Terrastore

Terms and Meanings :

Database          - A Database is the Main Container, it Contains the Data, Log files and all the Schemas within it.
                     -> Whenever a Database is created, two files are Generated,
                           -> MASTER Data File (MDF)(Contains Actual Data)
                           -> LOG Data File (LDF)(Transaction Log File - Used to recover the Database).



Schemas           - A Schema is like a Folder within a Database(namespace/package), and are mainly used to group logical Objects together, which leads to ease of
                  Setting Permission by Schema. (e.g HR Schema, Research Schema, Vendors Schema etc.., Now HR User can be made to access only HR Schema).

                  Syntax :
                           CREATE SCHEMA schemaname AUTHORIZATION username;                                                   // Postgres - Authorization username could be skipped

                           -> Its a Distinct namespace, that exists independently of the Database User who Created it (i.e It Could be Made accessible to Other Users). Its Ownership is Transferable.

                           -> Every Database has a Default Schema. If we Create a Table without a Schema, it will go inside the Default Schema of the Database.

                           -> We can only DROP a Schema if it is Empty(No Objects inside it). Otherwise, we should use the CASCADE Command.

Tables/Entity     - A Table is a  Collection of Data Elements organized in terms of Rows and Columns. It is a Convenient representation of a Relation.

Field/Attribute   - Fields are the Properties(Column names) of a Table/Entity.
                    Types of Attributes :

                        -> Simple Single Values Attribute (e.g Gender)
                        -> Simple Multi-Values Attribute (e.g Phone No)
                        -> Composite Single Values Attribute (e.g firstname_lastname)
                        -> Composite Multi-Values Attribute (e.g sibilingfirstname_sibilinglastname)
                        -> Derived Attribute (e.g Average Salary of Employees, age derived from DOB)

Record/Row/TUPLE  - A Single instance of a table that represents set of related data.

Column            - Set of Value(Instance) of a Particular Type(Filed).

Different Types of Keys in a Table -

         -> Super Key
                     -> A Single Attribute or a Combination of Attributes that is used to uniquely identify a record.
                     -> A table can have many super keys.
                     -> The Combination of Attributes need not be minimal. (i.e There can be a Combination of three attributes for a Super key, even if one or two is sufficient to uniquely identify a Record).

         -> Candidate Key
                     -> The Minimal Super Key or the Irreducible Super Key (i.e An SINGLE Attribute or a Combination of Attributes that identifies the record uniquely, but none of its subsets can identify the records uniquely).

         -> Unique Key
                     -> They have UNIUUE values in a Table, except for NULL Values.
                     -> It can take NULL values (Those NULL values could occur MULTIPLE TIMES. Thus, need not always be a Candidate Key)
                     -> There can one or more Unique Keys in a Table.
                     -> It is a Single Attribute

         -> Primary Key
                     -> A Candidate Key that is used by the Database Designer for unique identification of each Row in a Table.
                     -> A Primary Key can Consist of One or More Attributes of a Table
                     -> It Cannot take NULL values
                     -> There can only be one Primary Key
                     -> It can be a Combination of Attributes(e.g Composite Primary Key)

         -> Composite Key(Compound Key/Concatenated Key)
                     -> If we use Multiple Attributes to create a Primary Key, then that Primary Key is called ad Composite Key

         -> Alternate Key
                     -> Any Candidate Key that is not a Primary Key.

         -> Secondary Key
                     -> The Attribute that are not even the Super Key, but can still be used for Identification of Records(though NOT UNIQUE).

         -> Foreign Key
                     -> An Attribute or Combination of Attribute in one Base table that points to the Primary Key of Another table.
                     -> This is used to ensure Referential Integrity of the Data.(i.e Only values that are already Present in the Parent Table or NULL is allowed)

         -> Artificial Key
                     -> If no Obvious Stand alone Primary Key or Composite Key is available, then we simply create a new Attribute and assign a Unique Number to each Record.
                     -> This eventually becomes the Primary Key.

         -> Surrogate Key


         -> Partial Key


Constraints in SQL :

         -> Primary Key           - PRIMARY KEY(Col1, Col2, Col3);

         -> Unique                - Checks if the Value for the Column, is UNIQUE in the Table.
                                    UNIQUE (Col)

         -> Foreign Key           - FOREIGN KEY(Col111, Col222, Col333) REFERENCES PARENT_TABLE(Col1, Col2, Col3);

                                    CASCADING Referential Integrity - This allows the Database Server to define the Actions which should be taken when a user attempts to
                                                                    Delete/Update a key to which an existing Foreign key points.
                                                                    -> The CASCADING Referential Integrity is for the FOREIGN KEY of a Table(i.e) Not for the Entire Parent Table. Thus, it can
                                                                    only be applied when a Foreign key is Declared.
                                                                    Options -
                                                                        -> NO ACTION (Default, DELETE/UPDATE is ROLLED BACK)
                                                                        -> CASCADE (DELETE/UPDATE reflected everywhere the key is referenced as a Foreign Key)
                                                                        -> SET NULL
                                                                        -> SET DEFAULT

         -> Check                 - This is used to limit the Range of values, that can be entered for a Column.(NULL is Considered as a Valid Value if Passed).
                                    CHECK (Boolean_Expression)

         -> NOT NULL              - Checks if the Value to be Inserted for a Column is Not NULL
                                    NOT NULL

         -> DEFAULT               - The Value to be Set for the Column, if no Value is specified(NULL is Considered as a Value if Passed).
                                    DEFAULT Default_Value

         Note :
            -> We should be using the Keyword CONSTRAINT, if we want to name our Constraint. (e.g CONSTRAINT prim_key_attr PRIMARY KEY(id).
            -> CONSTRAINT name should be UNIQUE WITHIN a SCHEMA. It should not Collide with Table name either.

Additional Properties :

         Identity Column          -       -> If a Column is Marked as an Identity Column, we need not provide Value for that Column, for each Record we Insert into that Table.
                                          -> We can also explicitly give the value for the Identity Column. But, in case of SQL Server, We have to SET
                                             IDENTITY_INSERT to "ON"(Used in case of filling the Deleted Values).
                                          -> Thus, It could allow duplicate values.
                                          -> Same as AUTO_INCREMENT in MYSQL or SEQUENCE in PostgreSQL(SERIAL is implicitly Converted to a SEQUENCE in PostgreSQL).
                                          -> DBCC Command(Database Consistency Check) can be used to RESET the Identity Value(Start value).
                                          -> Last generated Identity value can be retrieved using Three Commands
                                                   SCOPE_IDENTITY()              ->    Same Session and Same Scope
                                                   @@Identity                    ->    Same Session, but Any Scope
                                                   IDENT_CURRENT(TableName)      ->    Any Session and Any Scope

                                                   Session  - A Connection with the Database Server.(A Tab in Terminal)
                                                   Scope    - A Single Action(Like Inset, Update, Delete etc..)


Important Keywords in SQL

         -> CREATE      -     -> We use CREATE Command to Create ALL Types of the Database Objects.
                              Syntax :
                                 CREATE Object_Type Name ...

         -> ALTER       -     -> If we Want to Alter Any Object which is already created using the CREATE Command.
                              -> If ONLY is specified before the Table Name, only that Table is altered, else the Table and all its descendant Tables (if any) are altered
                              Syntax :
                                 ALTER Object_Type [IF EXISTS, ONLY] Name Option
                                 Option - ADD/MODIFY/DROP/ALTER/RENAME/VALIDATE/DISABLE/ENABLE/CLUSTER/SET/RESET/INHERIT/NO INHERIT/OF/NOT OF/OWNER TO

         -> DROP        -     -> TO Drop any Object
                              -> We Cannot DROP an Object if it is Currently in use.
                              Syntax :
                                 DROP Object_Type Name

         -> SELECT      -    -> To Retrieve Column Values from a Table or a Combination of Two tables(JOIN).
                             -> Better to Specify all Column names, instead of just * for Performance reasons.
                             -> The Column could also contain EXPRESSION(involving literals, Arithmetic Operators(COUNT(id) + SUM(Salary)), SubQuery etc..)
                             -> It Always gives a Result Set, even that that can be a Single value.

                             SUBQUERY    -   -> A subquery is a (Select) query that is nested inside the WHERE or HAVING or FROM Clause of an Outer SELECT, INSERT, UPDATE, or DELETE statement, or inside another subquery.
                                             -> In SQL, a subquery can be substituted anywhere an Expression can be used in SELECT, UPDATE, INSERT, and DELETE statements,
                                                except in an ORDER BY list, if it returns a SINGLE VALUE.
                                             -> The SELECT query of a subquery is always enclosed in parentheses.
                                             -> A subquery nested in the outer SELECT statement has the following components:
                                                      -> A regular SELECT query including the regular select list components.
                                                      -> A regular FROM clause including one or more table or view names.
                                                      -> An optional WHERE clause.
                                                      -> An optional GROUP BY clause.
                                                      -> An optional HAVING clause.
                                             -> It cannot include a COMPUTE or FOR BROWSE or INTO clause, and may only include an ORDER BY clause when a TOP clause is also specified.
                                             -> Statements that include a subquery usually take one of these formats:
                                                      -> FROM (subquery)
                                                      -> WHERE expression [NOT] IN (subquery)
                                                      -> WHERE expression comparison_operator [ANY | ALL] (subquery)
                                                         Where Comparison Operator can be one of the (=, < >, >, > =, <, ! >, ! <, or < =) operators.
                                                      -> WHERE [NOT] EXISTS (subquery)
                                             -> There are three basic types of subqueries. Those that:
                                                      -> Used in the FROM Clause, that gives a Normal Result Set.(Only case where Multiple Columns are Supported)
                                                      -> Operate on lists introduced with IN, or those that a comparison operator modified by ANY or ALL, must have a Single Column.
                                                      -> Are introduced with an unmodified comparison operator or in place of an Expression and must return a Single Value.
                                                      -> Are existence tests introduced with EXISTS, almost always consists of an asterisk (*).
                                             -> SUBQUERY Rules
                                                      -> If the WHERE clause of an outer query includes a column name, it must be JOIN-COMPATIBLE with the Column in the subquery select list.
                                                      -> Subqueries introduced with Unmodified comparison operators often include AGGREGATE Functions, because these return a single value.
                                                      -> Because they must return a single value, subqueries introduced by an unmodified comparison operator
                                                         (one not followed by the keyword ANY or ALL) cannot include GROUP BY and HAVING clauses, unless we know the GROUP BY or HAVING clause itself returns a single value.
                                                      -> The DISTINCT keyword cannot be used with subqueries that include GROUP BY.
                                             -> Subqueries with Aliases
                                                      -> Many statements in which the subquery and the outer query refer to the same table can be stated
                                                         as self-joins (joining a table to itself). An Alias Will/Must be used in this case.

                                             Correlated Subqueries   -  -> Many queries can be evaluated by executing the subquery once and substituting the resulting value or values into the WHERE clause of the outer query.
                                                                           In queries that include a correlated subquery (also known as a repeating subquery), the subquery depends on the outer query for its values.
                                                                           This means that the subquery is executed repeatedly, once for each row that might be selected by the outer query.
                                                                        -> Sometimes a correlated subquery mimics a GROUP BY clause.



         -> DISTINCT    -    -> Distinct on a Column(s), is used to get Unique Column Values from the Result.
                             -> It is same like GROUP BY Clause, except that we cannot use Aggregate Functions(Without any Tweak) with it.(i.e Just Removes duplicates).
                             -> DISTINCT = GROUP BY - AGGREGATE FUNCTIONS
                             -> Distinct on Multiple Columns means, the Values should be Distinct on all the Columns.(e.g, record -> ('mush', 'chn') is DISTNICT only with record -> ('mush', 'chn')).
                             -> DISTINCT Cannot be applied on Specific Columns of a Select Query.

         -> Top         -    ->

         -> WHERE       -    -> To Filter records with a Condition. The Condition is Checked FOR EVERY RECORD.
                                Syntax :
                                    WHERE Condition

                                    Wildcards -
                                          -> %                     -    Matches one or more characters(any Character)
                                          -> _                     -    Matches one Character(any Character)

                                    SQL Logical Operators Possibilities -
                                          -> LIKE                  -    'String_Pattern'
                                          -> SIMILAR TO            -    'Regular_Expression'
                                          -> IN                    -    (val1, val2, val3, ...) OR SUBQUERY
                                          -> BETWEEN               -    (val1 AND val2)
                                          -> IS NULL               -    IS NULL
                                          -> IS NOT NULL           -    IS NOT NULL
                                          -> NOT                   -    Uses with LIKE, IN, BETWEEN, EXISTS and ALL Comparator Operators(e.g NOT Col1 = Col2)
                                          -> AND                   -    AND
                                          -> OR                    -    OR
                                          -> EXISTS                -    SUBQUERY
                                          -> ALL                   -    SUBQUERY
                                          -> ANY                   -    SUBQUERY

                                    SQL Comparison Operators -
                                          -> =, !=, <>(Same as !=), >, <. >=, <=, !>, !<

                                    SQL Arithmetic Operators -
                                          -> +, -, *, /, %

                                Additional Notes on Operators -

                                    Exists          -  -> When a subquery is introduced with the keyword EXISTS, the subquery functions as an existence test.(i.e The subquery
                                                          does not actually produce any data, it returns a value of TRUE or FALSE.
                                                       -> The WHERE clause of the outer query tests whether the rows that are returned by the subquery exist.
                                                       -> The Subquery is a CORRELATED SubQuery.(i.e It references a Table Outside the SubQuery)
                                                       -> JOIN along with DISTINCT does the same thing, but EXISTS has a Performance Advantage Over Join(i.e It returns True if there exists at least a Single Record, need not go through all the records, Unlike JOIN).
                                                       -> Logically very Similar to the IN Clause, but we don't use JOIN Like Condition in the SubQuery.
                                                       -> The keyword EXISTS is not preceded by a column name, constant, or other expression.
                                                       -> The select list of a subquery introduced by EXISTS almost always consists of an asterisk (*).
                                                          There is no reason to list column names because you are just testing whether rows that meet the conditions specified in the subquery exist.

                                    IN              -  -> The Possible Values for IN WITH A SUBQUERY is, all the Values for the related Column in the other table. It is as Efficient as Exists(Discussed above).
                                                       -> The SubQuery can have only one Column
                                                       -> Can also be expressed using a JOIN WITH DISTINCT

                                    ANY and ALL     -  -> The SubQuery can have only one Column
                                                       -> They can return a list of zero or more values and can include a GROUP BY or HAVING clause.
                                                       -> These subqueries can be restated with EXISTS.
                                                       ->  >ALL, means greater than the Maximum value and >ANY means greater than the Minimum value in the List returned by the SubQuery.
                                                       -> =ANY is Equivalent to IN and <>ALL is same as NOT IN.

                                Note :

                                    -> IN, ANY, ALL, EXISTS can be used with a SubQuery.
                                    -> JOIN takes all the record, when a Col in One table has Multiple matches in Other table(Col is Duplicated as many times it found a Match on the Other table).
                                    -> EXISTS is better than JOIN + DISTINCT

         -> INSERT      -    -> To Insert values into a Table
                             -> DEFAULT Keyword can be used if we want to use Default value for the Attribute.
                             Syntax :
                                 INSERT INTO TABLE_NAME(Col1, Col2, ...) VALUES(Val1, Val2, ...);
                                                         OR
                                 INSERT INTO TABLE_NAME VALUES(Val1, Val2, ...);           //If we are going to insert Values for all Attributes.

         -> UPDATE

         -> DELETE

         -> FROM

         -> JOIN        -    -> By using joins, we can retrieve data from two or more tables based on logical relationships between the tables.
                             -> A join can always be expressed as a subquery. A subquery can often, but not always, be expressed as a join.
                                This is because joins are symmetric, you can join table A to B in either order and get the same answer. The same is not true if a subquery is involved.
                                Syntax :
                                    FROM first_table join_type second_table [ON (join_condition)]
                             -> A join condition defines the way two tables are related in a query by:
                                      -> Specifying the column from each table to be used for the join. A typical join condition specifies a foreign key from one table and its associated key in the other table.
                                      -> Specifying a logical operator (for example, = or <>,) to be used in comparing values from the columns.
                             -> Inner joins can be specified in either the FROM (Includes ON Clause)or WHERE clauses. Outer joins can be specified in the FROM clause only.
                             -> Specifying the Join conditions in the FROM clause helps separate them from any other search conditions that may be specified in a WHERE clause, and is the recommended method for specifying joins.
                             -> Columns used in a join condition are not required to have the same name or be the same data type. However, if the data types are not identical,
                                they must be compatible, or be types that SQL Server can implicitly convert. If the data types cannot be implicitly converted, the join condition must explicitly convert the data type using the CAST function.
                             -> JOIN Types
                                      -> Inner joins
                                      -> Outer joins
                                      -> Cross joins
                                INNER JOIN   -  -> Inner joins use a comparison operator to match rows from two tables based on the values in common columns from each table.
                                                -> Inner joins can be specified in either the FROM (Includes ON Clause)or WHERE clauses.In case of WHERE Clause, it becomes an IMPLICIT Inner Join.
                                                -> The Not-Equal join (<>) is rarely used. As a general rule, Not-Equal joins make sense only when used with a self-join.
                                                Types of Inner Join -
                                                      -> A THETA join allows for arbitrary comparison relationships (such as ≥).
                                                      -> An EQUI-JOIN is a theta join using the equality operator.
                                                      -> A NATURAL join is an EQUI-JOIN on attributes that have the same NAME in each relationship. Additionally, a natural join removes the duplicate columns involved in
                                                         the equality comparison. This type of JOIN is HIGHLY DISCOURAGED.





         -> ORDER BY

         -> GROUP BY

         -> HAVING

         -> WITH

         -> UNION

         -> UNION ALL

         -> INTERSECT










         -> RETURNING   -     -> This is used to get the value of the Column(s) which are inserted/Deleted currently. Used in cases where the value for a Column is Inserted by a Sequence.
                              Syntax :
                                 insert into dummy3(id, name) values(DEFAULT, 'sfcsdd'), (DEFAULT, 'fsfsd') RETURNING id, name;

         -> CROSS

         -> OUTER

         -> OVER

         -> PARTITION

         -> CASE

         -> WHEN

         -> THEN

         -> ELSE

         -> END
