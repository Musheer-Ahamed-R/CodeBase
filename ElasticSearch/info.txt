Elastic Search:
    -> Elasticsearch is a highly scalable open-source full-text search and analytics engine.
    -> It allows you to store, search, and analyze big volumes of data quickly and in near real time.
    -> It is a document oriented SEARCH engine.
    -> It is built on top of a Search software known as lucene.
    -> The underlying datastructure used in the lucene software is known as an inverted index.
       (This type of indexing maps words or numbers to the actual document location where they are present).
    -> Every document we insert into the elastic search, it organizes into the inverted indexed data structure, so that searching is possible.



Terms:
    Clustered:
      -> A cluster is a collection of one or more nodes (servers) that together holds your entire data 
         and provides federated indexing and search capabilities across all nodes.
      -> A cluster is identified by a unique name which by default is "elasticsearch". This name is important because a node 
          can only be part of a cluster if the node is set up to join the cluster by its name.

      Note:
        -> It is valid and perfectly fine to have a cluster with only a single node in it. 

    Node:
      -> A node is a single server that is part of your cluster, stores your data, and participates in the cluster’s indexing and search capabilities.
      -> Just like a cluster, a node is identified by a name which by default is a random Universally Unique IDentifier (UUID)

      Note:
        -> If there are no other Elasticsearch nodes currently running on your network, starting a single node will by default
           form a new single-node cluster named elasticsearch.

    Index:
      -> An index is a collection of documents that have somewhat similar characteristics. 

      Note:
        -> An index name must be all lowercase.

    Type:
      -> A type is a logical category/partition of your index whose semantics is completely up to us. 
      
    Document:
      -> A document is a basic unit of information that can be indexed. 

      Note:
        -> Although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index.  

    Shards:
      -> An index can potentially store a large amount of data that can exceed the hardware limits of a single node. 
      -> Elasticsearch provides the ability to subdivide your index into multiple pieces called shards.
      -> When you create an index, you can simply define the number of shards that you want. 
      -> Each shard is in itself a fully-functional and INDEPENDENT "index" that can be hosted on any node in the cluster.

    Replica:
      -> In a network/cloud environment where failures can be expected anytime, it is very useful and 
         highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason.
      -> Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.

      Note:
        -> It is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.
        -> The number of shards and replicas can be defined per index at the time the index is created. After the index is created,
           we may change the number of replicas dynamically anytime but we cannot change the number of shards after-the-fact.

    -> The Commands/Query that we will be sending to elastic search(for searching, inserting, removing, retrieving) is also going to be in JSON Syntax.
       and the reponse received will also be in the JSON Synatx.

    -> Elastic Search analogy
        -> index    -   database
        -> type     -   tables
        -> document -   row
        -> fields   -   column





    -> HEAD to check if a document exists. 
    -> DELETE to delete a document. When we delete a document it becomes inaccessible for the end user. But, elastic search actually
       flags it as deleted and deletes it after some time and not immediately.

    Syntax:
        METHOD /<index>/<type>/<document_id>
        
        GET /<index>/<type>/<document_id>/<key_inside_document>          // only that value for key is returned 


Indexing:
  -> We can index a document using two api's.PUT and POST(if id is not available).
  -> If id is not passed, then elastic search will generate a random id and use it index the document.

Replacing Indexed Document:
  -> We can do this using the PUT Command
  -> This simply replaces the old document with new one(creates if this is a new document).

Modifying our data:
  -> The REST API for update is accessible from the _update endpoint. (e.g POST /customer/doc/1/_update)
  -> Whenever we modify a document, elasticsearch will replace (i.e. reindex) a new document on top of the existing one with the same id.
  -> We can modify a document using POST method. This combines old and new fields, replace the old document with new one)
  -> Updates can also be performed by using simple scripts.  (e.g "script" : "ctx._source.age += 5")
  -> Elasticsearch provides the ability to update multiple documents given a query condition (like an SQL UPDATE-WHERE statement). 

Deleting Document:
  -> We can delete a document using the DELETE method
  -> We an also delete all documents matching a specific query using the delete query api.

Batch Processing:
  -> Elasticsearch also provides the ability to perform any of the above operations in batches using the _bulk API.
  -> This functionality is important in that it provides a very efficient mechanism to do multiple operations as fast as possible
     with as few network roundtrips as possible.
  -> We use POST comand to achieve this functionality.
     e.g POST /customer/doc/_bulk?pretty
         { "index": {} }
         { "price" : 10000, "color" : "white", "make" : "honda", "sold" : "2016-10-28", "condition": "okay"}      // actual doc
         {"update":{"_id":"1"}}
         {"doc": { "name": "John Doe becomes Jane Doe" } }
         {"delete":{"_id":"2"}}

  Note:
    -> The Bulk API does not fail due to failures in one of the actions. If a single action fails for whatever reason,
       it will continue to process the remainder of the actions after it.
    -> When the bulk API returns, it will provide a status for each action (in the same order it was sent in) so that
       we can check if a specific action failed or not.

Searching:
    -> The REST API for search is accessible from the _search endpoint.
    -> There are two basic ways to run searches: 
        * one is by sending search parameters through the REST request URI 
        * sending them through the REST request body. 

Available keys for Query params:
  -> q, sort, pretty, help, v

Query DSL:
**************
  -> There are two types of clauses:
    * Leaf query clauses
        -> Leaf query clauses look for a particular value in a particular field, such as the match, term or range queries.
        -> These queries can be used by themselves.

          * match_all
          * match_none
          * match
          * match_phrase
          * match_phrase_prefix
          * multi_match
          * common_terms
          * query_string
          * simple_query_string

          * term
          * terms
          * terms set
          * range
          * exists
          * prefix
          * wildcard
          * regexp
          * fuzzy
          * type
          * ids

          * span_term
          * span_multi
          * span_first
          * span_near
          * span_or
          * span_not
          * span_contains
          * span_within
          * field_masking_span

    * Compound query clauses
        -> Compound query clauses wrap other leaf or compound queries and are used to combine multiple queries in a logical fashion
           (such as the bool or dis_max query), or to alter their behaviour (such as the constant_score query).
    


    Query Contexts:
      -> The behaviour of a query clause depends on whether it is used in query context or in filter context
          * Query context:
              -> A query clause used in query context answers the question “How well does this document match this query clause?” 
                 Besides deciding whether or not the document matches.
              -> the query clause also calculates a _score representing how well the document matches, relative to other documents.
              -> Query context is in effect whenever a query clause is passed to a query parameter, such as the query parameter in the search API.
    
    Filter Context:
      -> In filter context, a query clause answers the question “Does this document match this query clause?” 
         The answer is a simple Yes or No — no scores are calculated.
      -> Filter context is in effect whenever a query clause is passed to a filter parameter, such as the filter or must_not parameters in the bool query,
         the filter parameter in the constant_score query, or the filter aggregation.
      *******
      -> The filter does not do relevancy scoring, it just filters the document.(just like classic DATABASE QUERIES).
      -> They dont affect the scores of matching document(all have same score, 0), rather they filter out non-matching documents.
      -> We should always use the filter context, if we dont care about the relevancy scoring. Because, ES caches the result and it is mch faster than normal 
         query context because, it does not need to do the relevancy scoring calculation.
      -> we can do pretty mush everything we can with filter context as we could have done in with a query context. (i.e we can have bool, must, should etc.. inside of it)

    Match All:
      -> Matches all documents, giving them all a _score of 1.0.(only for debugging/viewing purpose)
         e.g "match_all": {}

    Match None:
      -> This is the inverse of match_all query, which matches no documents.(only for debugging/viewing purpose)
         e.g "match_none": {}

    Notes:
      -> The _score can be changed with the boost parameter


    Full-Text Queries:
      -> The high-level full text queries are usually used for running full text queries on full text fields like the body of an email. 
      -> They understand how the field being queried is analyzed and will apply each field’s analyzer (or search_analyzer)
         to the query string before executing.

      match query:
        -> It accept text/numerics/dates, analyzes them, and constructs a query.
        -> The match query is of type boolean. It means that the text provided is analyzed and the analysis process constructs
           a boolean query from the provided text.(bool with should match clause)
        -> The operator flag can be set to or or and to control the boolean clauses (defaults to or).
        -> The analyzer can be set to control which analyzer will perform the analysis process on the text.
        -> It analyzes the given value, creates tokens, matches the token against the required field. If the field value has ANY ONE of the tokens, 
           then it is considered a match, irrespective of the order.
        Syntax:
          match: {"field_name_dynamic": "value"}

        Notes:
          -> Additional options, operator, minimum_should_match, analyzer, lenient, zero_terms_query, cutoff_frequency, fuzziness
          -> "value" can be an object if we need to specify additional things.

      match_phrase query:
        -> The match_phrase query analyzes the text and creates a phrase query out of the analyzed text.
        -> The given value is analyzed, then creates tokens, then matches those token against the field.
        -> ALL the tokens must match and the tokens must be CONTINUOUS.

      match_phrase_prefix query:
        -> The match_phrase_prefix is the same as match_phrase, except that it allows for prefix matches on the last term in the text.
           (i.e)The LAST token need not be complete.
        -> It will be very useful with search-as-you-type.

        Notes:
          -> Additional options, "max_expansions"

      multi_match query:
        -> The multi_match query builds on the match query to allow multi-field queries.
        -> It is considered a match if the value exists in any one of the fields.
        -> Fields can be specified with wildcards.
        -> Individual fields can be boosted with the caret (^) notation.(Field Boosting)
        -> The way the multi_match query is executed internally depends on the type parameter.
        Syntax:
          -> "multi_match" : {"query":    "this is a test", "fields": [ "subject", "message" ] }

      Notes:
        -> Additional options, "type"

      common_terms query:
        -> The common terms query is a modern alternative to stopwords which improves the precision and recall of search results 
           (by taking stopwords into account), without sacrificing performance.
        -> The common terms query divides the query terms into two groups: more important (ie low frequency terms) and less important
           (ie high frequency terms which would previously have been stopwords and ignored).
        -> First it searches for documents which match the more important terms.
        -> Then, it executes a second query for the less important terms. But instead of calculating the relevance score
           for all matching documents, it only calculates the _score for documents already matched by the first query
        -> While specifying the minimum_should_match, we can use {"low_freq" : 2, "high_freq" : 3}.

      Syntax:
        -> "common": { "body": { "query": "this is bonsai cool", "cutoff_frequency": 0.001 } }

        Notes:
          -> Additional options, minimum_should_match, low_freq_operator, high_freq_operator

      query_string query:
        -> 

      simple_query_string:
        ->   

    Term Queries:
      -> While the full text queries will analyze the query string before executing, the term-level queries
         operate on the EXACT terms that are stored in the INVERTED INDEX(including case-sensitive).
      -> These queries are usually used for structured data like numbers, dates, and enums, rather than full text fields.
      ***
      -> Alternatively, they allow you to craft low-level queries, foregoing the analysis process.(NO Analysis process)

      Term Query:
        -> The term query finds documents that contain the exact term specified in the inverted index.
        -> This unlike match, will not even be creating tokens to match("course desc" will be EXACTLY looked up into inverted index).
        Synatx:
          "term": { "status": { "value": "urgent", "boost": 2.0 }}

        Notes:
          -> Additional fields, boost
          -> If we have a field with value, Quick Foxes! and wee use term query(Quick Foxes!) for matching the value, this would NOT MATCH, 
             since "Quick Foxes!" would be stored in inverted index as quick and foxes separately(case sensitive).


      Terms Query:
        -> Filters documents that have fields that match any of the provided terms (not analyzed).
        -> We can also define the location where we can get the set of values to match.(useful is dynamic value lookup)(careful not be used on full text fields)
        -> In which case, values for the terms filter will be fetched from a field in a document with the specified id
           in the specified type and index.(a get request is made to get the value)

      Terms Set Query:
        -> Returns any documents that match with at least one or more of the provided terms.(same as terms, except that we can specify the minimum terms to match 
           to be considered as a match)
        -> minimum_should_match can be specified using a field(within the document) or using scripts.
        Synatx:
          "terms_set": { "field_name_dynamic" : { "terms" : ["abc", "def", "ghi"], "minimum_should_match_field": "required_matches" }}
          * required_matches - a field name within the matching document.


      Range Query:
        -> Matches documents with fields that have terms within a certain range.
        -> This query accepts gte, gt, lte, lt and boost
        -> we can specify the format for data and also the time zone(the offset will be added to the date which we provided as input)
        Syntax:
          "range" : { "field_name_dynamic" : { "gte" : 10, "lte" : 20, "boost" : 2.0 } }

        Notes:
          The expression starts with an anchor date, which can either be now, or a date string ending with ||. This anchor date
          can optionally be followed by one or more maths expressions:
            +1h - add one hour
            -1d - subtract one day
            /d - round down to the nearest day
      
      Exists Query
        -> Returns documents that have at least one non-null value in the original field.()

        Note:
          -> empty string is not considered as a null value.
          -> At least one non-null value is required in case of arrays.

      Prefix Query:
        -> Matches documents that have fields containing terms with a specified prefix (not analyzed).
        Synatx:
          "prefix" : { "user" : "ki" }

      
      Wildcard Query:
        -> Matches documents that have fields matching a wildcard expression (not analyzed). 
        -> Support for *(zero or more char sequence), ?(single character)
        -> In order to prevent extremely slow wildcard queries, a wildcard term should not start with one of the wildcards * or ?. 
        Synatx:
          "wildcard" : { "user" : "ki*y" }
      
      Regexp Query:
        -> The regexp query allows you to use regular expression term queries. 
        -> The "term queries" in that first sentence means that Elasticsearch will apply the regexp to the terms produced
           by the tokenizer for that field, and not to the original text of the field.
        -> The performance of a regexp query heavily depends on the regular expression chosen. 

        Fuzzy Query:
          -> The fuzzy query uses SIMILARITY based on Levenshtein edit distance.
          -> The fuzzy query generates all possible matching terms that are within the maximum edit distance specified in fuzziness
             and then checks the term dictionary to find out which of those generated terms actually exist in the index.
          
        Type Query:
          -> Filters documents matching the provided document / mapping type.(Type here is NOT the field type)
          Synatx:
            "type" : { "value" : "my_type" }

        Ids Query:
          -> Filters documents that only have the provided ids. Note, this query uses the _uid field.
          Synatx:
            "ids" : { "type" : "my_type", "values" : ["1", "4", "100"] }      // type is optional

          Notes:
            -> Additional fields, type

    Compound Queries:
      -> Compound queries wrap other compound or leaf queries, either to combine their results and scores,
         to change their behaviour, or to switch from query to filter context.

      constant_score query:
        -> A query that wraps another query and simply returns a constant score equal to the query boost
           for every document in the filter. 
        -> Filter clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching.

      Bool Query:
        -> A query that matches documents matching boolean combinations of other queries.
        -> It is built using one or more boolean clauses, each clause with a typed occurrence. The occurrence types are:
            * must: 
              -> The clause (query) must appear in matching documents and will contribute to the score.
            * filter:
              -> The clause (query) must appear in matching documents. However unlike must
                 the score of the query will be ignored. 
              -> Filter clauses are executed in filter context.
            * should:
              -> The clause (query) should appear in the matching document.
              -> If the bool query is in a query context and has a must or filter clause then a document will match
                 the bool query even if none of the should queries match. In this case these clauses are only used
                 to influence the score. If the bool query is a filter context or has neither must or filter then
                 at least one of the should queries must match a document for it to match the bool query.
              -> This behavior may be explicitly controlled by settings the minimum_should_match parameter.
            * must_not:
              -> The clause (query) must not appear in the matching documents. 
              -> Clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching. 
              -> Because scoring is ignored, a score of 0 for all documents is returned.


        Notes:
          -> we can use named queries to assign a name to each clause.(used in finding which clause was a match)

      Dis Max Query:
        -> A query that generates the union of documents produced by its subqueries, and that scores each document with
           the maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional 
           matching subqueries.

      Boosting Query
        -> The boosting query can be used to effectively demote results that match a given query. Unlike the "NOT" clause 
           in bool query, this still selects documents that contain undesirable terms, but reduces their overall score.

    Joining Queries:
      
      Nested query
        -> Documents may contain fields of type nested. These fields are used to index arrays of objects, where each object 
           can be queried (with the nested query) as an independent document.
        -> Any fields referenced inside the query must use the complete path (fully qualified, starting from the path).  
        Note:
          -> Used Fields are, path, score_mode, ignore_unmapped

      Has Child Query:
        -> The has_child filter accepts a query and the child type to run against, and results in parent documents that have
           child docs matching the query.
        -> This returns the parent documents that match the query

        Notes:
          -> Used fields, type, min_children, max_children, score_mode, ignore_unmapped

      Has Parent Query:
        -> The has_parent query accepts a query and a parent type. The query is executed in the parent document space,
            which is specified by the parent type. 
        -> This query returns child documents which associated parents have matched. 

        Notes:
          -> Used fields, type, min_children, max_children, score_mode, ignore_unmapped

    Geo Queries:
      -> 

  Aggregations:
    -> They allow for powerful data analytics. This is basically like a GROUP BY clause in database.
    -> The aggregation is going to run in the scope of the query condition.(if not specified, then all documents).
    -> we can use the "stats" property to get all aggregations on a given property.
    -> The creation of buckets can be recursive and on each bucket, we can define our metrics by using aggs property inside of our bucket.
    Synatx:
      "aggs": {
        "some_random_name": {
          "terms": {
            "field": field_name.keyword
          }
        },
        "aggs": {
          "bucket_name_dynamic": {

          },
          "metric_name_dynamic_1": {

          }
          "metric_name_dynamic_2": {

          }
        }
      }
      **** 
      // aggs can have both a bucket(inner) and the metrics(to be run within the scope of the current bucket).
    Notes:
      -> we have to be using field_name.keyword, to specify elastic search that it is a one whole word not a splitup or anything. 
         This is only required for textual data.
      -> we can use size 0, to not get the documents on which the data is aggregated.
      -> The leaf queries used inside of the aggs property can be a bit different. e.g { "range": { "field": "field_name", "ranges": [{ "from": "", "to": "" }] }}

    -> Metric
    -> Bucket
    -> Pipeline

    Metric:
      -> 

  Notes:
    -> 


  Analyzer:
    -> 


Notes:
    -> It is important that each document we insert into an elastic search better has a unique id.(By default elastic search automatically generates an id 
       for a document if not explicitly provided.)
    -> Anything with an underscore is considered as a meta field which is appended by the elastic search.
    -> Whenever we update a specific key inside of a document, it does not just updates the specific key, it updates the entire document with
       the new document given.(i.e we cannot update specific fields inside of a document)
    -> Thus, documents are immutable in elastic search.
    -> Indexing a document means Inserting a Document(Indexes are created at this time). 
    -> Actually indexing happens everytime we create a new/update a document(a new document will be created even while updating - documents are immutable)
    -> When we try to retrieve an index itself, we actually get only the structure of the document(This is figured out by elastic search itself).
       It has two components, settings and mappings. together called a Schema.
    -> The mapping component of the index defines the structure of what field will conatain what type of data.
    -> we have a choice of defining all the mappings that an index can contain ahead of time or it will be figured out by elastic search based on the documentts we index(insert).
    -> If we try to delete an empty type it throws an error, but we can actually delete an index which is empty.
    -> An index and indexing are two dofferent things, index is like a database context and indexing is like creating the index page of a book.
    -> In Elasticsearch, you have the ability to execute searches returning hits and at the same time return aggregated results separate from the hits all in one response. 
    ***************
    -> for any given query, check if the value is going to be analyzed or not(before searching).
    -> The difference the term query and match phrase query is, term query is not analyzed, while match phrase query is analyzed and 
       expects the words to be in same order as specified in the query.



    Multi match Query
    Query_string query
    Single_query _string
    DIs Max Query
    function score query
    Geo Queries
    Specialized Queries
    Span Queries