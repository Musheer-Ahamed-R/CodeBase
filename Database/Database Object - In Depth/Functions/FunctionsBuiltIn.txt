In-Built Functions -
      ISNULL         -     -> If the Expression passed is NOT NULL, then the Expression value itself is Returned, else the second Argument is Returned.
                           Syntax :
                              ISNULL(Expression, replacementValue)
                           Compatibility :
                              SQLSever

      COALESCE      -     -> Evaluates the arguments in order and returns the current value of the first expression that initially does not evaluate to NULL.
                          -> The COALESCE Expression is a syntactic shortcut for the CASE Expression. That is, the code COALESCE(expression1,...n) is rewritten by the query optimizer as the following CASE expression:
                             CASE
                              WHEN (expression1 IS NOT NULL) THEN expression1
                              WHEN (expression2 IS NOT NULL) THEN expression2
                              ...
                              ELSE expressionN
                             END
                          Syntax :
                              COALESCE ( expression [ ,...n ] )
                          Compatibility :
                              SQLServer, PostgreSQL

      GREATEST      -     -> The GREATEST functions select the largest value from a list of any number of expressions. The expressions must all be convertible to a common data type, which will be the type of the result.
                             NULL values in the list are ignored. The result will be NULL only if all the expressions evaluate to NULL.
                             Syntax :
                                 GREATEST(value [, ...])
                             Compatibility :
                                 PostgreSQL

      LEAST         -     -> The LEAST functions select the smallest value from a list of any number of expressions. The expressions must all be convertible to a common data type, which will be the type of the result.
                             NULL values in the list are ignored. The result will be NULL only if all the expressions evaluate to NULL.
                             Syntax :
                                 LEAST(value [, ...])
                             Compatibility :
                                 PostgreSQL

      NULLIF        -     -> The NULLIF function returns a null value if value1 equals value2; otherwise it returns value1. This can be used to perform the inverse operation of the COALESCE.
                             Syntax :
                                 NULLIF(value1, value2)
                             Compatibility :
                                 PostgreSQL

      ASCII         -     -> Returns the ASCII Code of the Given Character Expression.
                             Syntax
                                 ASCII(Character_Expression)
                             Compatibility :
                                 SQLServer

      CHAR          -     -> Converts an Int ASCII Code to a Character Expression(Reverse of ASCII function).
                             Syntax
                                 CHAR(Integer_Expression)
                             Compatibility :
                                 SQLServer

      LTRIM         -     -> Removes Blanks on the Left hand-side of the Character Expression.
                             Syntax
                                 LTRIM(Character_Expression)
                             Compatibility :
                                 SQLServer

      RTRIM         -     -> Removes Blanks on the Right hand-side of the Character Expression.
                             Syntax
                                 RTRIM(Character_Expression)
                             Compatibility :
                                 SQLServer

      LOWER        -     -> Converts all the Character in the given Character Expression to LowerCase Letters.
                            Syntax
                                 LOWER(Character_Expression)
                            Compatibility :
                                 SQLServer

      UPPER        -     -> Converts all the Character in the given Character Expression to UpperCase Letters.
                            Syntax
                                 UPPER(Character_Expression)
                            Compatibility :
                                 SQLServer

      REVERSE      -     -> Reverses all the Character in the given String Expression.
                            Syntax
                                 REVERSE(String_Expression)
                            Compatibility :
                                 SQLServer

      LEN          -     -> Returns the Count of Total Characters in the given String Expression excluding the Blanks at the End of the Expression.
                            Syntax
                                 LEN(String_Expression)
                            Compatibility :
                                 SQLServer

      LEFT         -     -> Returns the Specified Number of Characters from the Left hand Side of the Given Character Expression.
                            Syntax
                                 LEFT(Character_Expression, Integer_Expression)
                            Compatibility :
                                 SQLServer

      RIGHT        -     -> Returns the Specified Number of Characters from the Right hand Side of the Given Character Expression.
                            Syntax
                                 RIGHT(Character_Expression, Integer_Expression)
                            Compatibility :
                                 SQLServer

      CHARINDEX    -     -> Returns the Starting position of the Specified Expression in a Character String.
                            Syntax
                                 CHARINDEX(Expression_to_Find, Expression_to_Search, Start_Location)
                            Compatibility :
                                 SQLServer

      SUBSTRING    -     -> Returns the SubString from the Given Character String.
                            Syntax
                                 SUBSTRING(Expression, Start_Location, length)
                            Compatibility :
                                 SQLServer

      REPLICATE    -      -> Repeats the Given String for the Specified Number of Times.
                             Syntax
                                 Replicate(String_To_Be_Replicated, Number_of_Times)
                             Compatibility :
                                 SQLServer

      SPACE        -      -> Returns the Specified Number of Spaces.
                             Syntax
                                 SPACE(Number_of_Times)
                             Compatibility :
                                 SQLServer

      PATINDEX     -      -> Returns the Starting Position of the First Occurrence of a Pattern in a Specified Expression.
                          -> With CharIndex, we cannot use Wildcards, whereas PatIndex() providers this Capability.
                             Syntax
                                 PATINDEX(Pattern_To_Be_Searched, Expression)
                             Compatibility :
                                 SQLServer

      REPLACE      -      -> Replaces all Occurrences of a Specified value with another String Value.
                             Syntax
                                 REPLACE(String_Expression, Pattern, Replacement_Value)
                             Compatibility :
                                 SQLServer

      STUFF        -      -> Inserts Replacement_Expression, at the Start Position Specified, along with removing the Characters Specified using length parameter.
                             Syntax
                                 STUFF(Original_Expression, Start, Length, Replacement_Expression)
                             Compatibility :
                                 SQLServer

      ISDATE       -      -> Checks if the given Value is a Valid Date, Time or DataTime.
                             Syntax
                                 ISDATE(String_Expression)
                             Compatibility :
                                 SQLServer

      DAY          -      -> Returns the "Day Number of the Month" of the Given Date.
                             Syntax
                                 DAY(String_Expression)
                             Compatibility :
                                 SQLServer

      MONTH        -      -> Returns the "Month Number of the Year" of the Given Date.
                             Syntax
                                 MONTH(String_Expression)
                             Compatibility :
                                 SQLServer

      YEAR         -      -> Returns the "Year Number" of the Given Date.
                          Syntax
                              YEAR(String_Expression)
                          Compatibility :
                              SQLServer

      DATENAME     -      -> Returns a String, that represents a Part of the Given Date.
                          -> Date_Part can take WEEKDAY, DAY, MONTH, YEAR etc..
                          Syntax
                              DATENAME(Date_Part, Date)
                          Compatibility :
                              SQLServer

      DATEPART     -      -> Returns a integer, that represents a Part of the Given Date.
                          -> Date_Part can take WEEKDAY, DAY, MONTH, YEAR etc..
                          -> This is Similar to DateName. DateName returns nvarhcar whereas DATEPART Integer.
                          Syntax
                              DATEPART(Date_Part, Date)
                          Compatibility :
                              SQLServer

      DATEADD      -      -> Returns a integer after adding the Specified Number to the DATEPART(value that represents a Part of the Given Date).
                          -> Date_Part can take WEEKDAY, DAY, MONTH, YEAR etc..
                          Syntax
                              DATEADD(Date_Part, numberToAdd, Date)
                          Compatibility :
                              SQLServer

      DATEDIFF     -      -> Returns the Count of the Specified DATEPART boundaries crossed between the Specified Start Date and the End Date.
                          -> Date_Part can take WEEKDAY, DAY, MONTH, YEAR etc..
                          Syntax
                              DATEDIFF(Date_Part, startDate, endDate)
                          Compatibility :
                              SQLServer

       CAST        -      -> Converts one Datatype to Other Data Type. Provided the Data can be Converted to the Other Data Type.
                          Syntax :
                               CAST ( expression AS data_type [ ( length ) ] )
                          Compatibility :
                               SQLServer
                          Note -
                            -> Value can be a Column.

      CONVERT      -      -> Converts one Datatype to Other Data Type. Provided the Data can be Converted to the Other Data Type.
                          -> Using this Function, we can Style our Date Output(Not Available in CAST))
                          Syntax :
                               CONVERT ( data_type [ ( length ) ] , expression [ , style ] )
                          Compatibility :
                               SQLServer

      ABS          -      -> This Returns the Absolute Positive Number.
                          Syntax
                              ABS(Numeric_Expression)

      CEILING      -      -> This returns the Smallest Integer Value, greater than or equal to the Parameter.
                          Syntax
                              CEILING(Numeric_Expression)

      FLOOR        -      -> This returns the Largest Integer Value, less than or equal to the Parameter.
                          Syntax
                              FLOOR(Numeric_Expression)

      POWER        -      -> This returns the Power value of the Specified Expression to the Specified Power.
                          Syntax
                              POWER(Numeric_Expression, toPower)

      SQUARE       -      -> This returns the Square value of the Specified Expression.
                          Syntax
                              SQUARE(Numeric_Expression)

      SQRT         -      -> This returns the Square Root value of the Specified Expression.
                          Syntax
                              SQRT(Numeric_Expression)

      RAND         -      -> This returns a Random Float Number between o and 1.
                          -> When the Seed value is Specified, the Random function always returns the Same Value for the Same Seed.
                          Syntax
                              RAND( [Seed_Value] )

      ROUND         -     -> Rounds the given Numeric Expression based on the length. This returns a Random Float Number between o and 1.
                          -> When the Seed value is Specified, the Random function always returns the Same Value for the Same Seed.
                          Syntax
                              ROUND( Numeric_Expression, length [, function] )

                           Notes :
                              -> length   - Specifies the Number of Digits that we want to round to. If the Length is positive, then the Rounding
                                            is applied to the Decimal Part. If negative, then the Rounding is applied to the Number before Decimal.
                                 function - It is used to Indicate Rounding or Truncating Operation. 0 - Rounding(default) and 1 - Truncating.


Aggregate Functions -     -> The Function is applied to the whole Group,
                           but we can use a Condition(Corresponding to every Single Row in the GROUP) to determine whether to pass an expression(to be included in the result) or Not as an Argument to the Function
                           Expression  can be Column Expression or a Condition(on Every Single Row of the Group) that returns an Expression or Some Constant).
                           Selected Group.(e.g Condition - DISTINCT, CASE(returning 1 or 0) OR ANY NORMAL CONDITION ON ANY NUMBER OF COLUMNS that returns an EXPRESSION... )                   -------- IMPORTANT   ------------
