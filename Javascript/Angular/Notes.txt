1 -> Angular uses Typescript

2 -> Typescript is a super set of vannila JS.(i.e offers more features than vanilla JS like Classes, Interfaces and Strong typing)
		 This does not run in the browser. So, it is complied to JS in the end. This is handled by Angular CLI

3 -> We can add our own styles(Global Styles) inside of the angular.json file in styles node. 
		 If seperate module, start the path from node_modules 

4 -> index.html is the HTML file served by the server. It includes html from all the components

5 -> 

6 -> Whenever the ng serve, rebuilds the project, it will create JS bundles and automatically add the right imports in the index.html file
	 	 So the script we write in main.ts is the first things that get executed. 
		 This bootstraps/starts our angular application by passing the App module(/app/app.module.ts).
		 The app.module.ts has a bootstrap array, which lists all the components which should be known to angular
		 at the point of time it analyzes our index.html(i.e starting our server)

7 -> Angular uses Components to build web pages and uses modules to bundle different pieces(e.g Components)
     into packages.

8 -> We can create local reference(marker) on an element by using #someName within that element

9 -> We can use ng-template(inbuilt component/directive) to mark places in the DOM.

Components:
	1 -> There is a root component(App component) which will tie together our whole application.
	 	 We add other components to it

	2 -> Each component has its own template(HTML), styling and script

	3 -> It allows our complex application into small reusable parts

	4 -> A Component is just a TS class, so that angular is able to instantiate it.

	5 -> We add to add Decorators(Typescript feature to enhance classes and other elements) so that angular understands its not a normal class, rather a component.
		 Need to use @sign in the front (e.g @Component)
	
	6 -> We need to pass some metadata to the Decorator like selectors

	7 ->  sample component
		      @Component({
            selector: 'app-server',
            templateUrl: './app.component.html',
            styleUrls: ['./app.component.css']
          })
		      export class ServerComponent {
    		  }

          selector: The tag to be used to use this template. It works just like CSS selectors
                    (i.e selecting by element tag itself, class, attributes). Also, selecting by Id/pseudo selectors are not supported by angular. 
          templateUrl: refer to an external template
          template: Actual Html template(used if very less html code)
          styleUrls: array referring to external styles
          styles: array of CSS styling string


  8 -> We need to register the component in the app.module declarations field
       because Angular will not scan our project for all components.

  9 -> We can then use our component using the selector tag in some other main component(html file).

  9 -> We need to add the Main AppComponent in bootstrap array of app.module.
  		 This bootstrap array, lists all the components which should be known to angular
		   at the point of time it analyzes our index.html(i.e starting our server)

  11 -> Everytime we use the component selector in any template, a new component object is created.

Databinding:
    -> Communication between TS code and the HTML template
    -> Outpu data (from TS to HTML)
        -> Types:
          -> String Interpolation {{data}}
          -> Property Binding [property]="data"
    -> React to user events (HTML to TS)
          -> (event)="expression"
    -> Two way data binding  (HTML to TS and vice versa)
          -> [(ngModel)] = 'data'

      -> String Interpolation:
            -> Within the {{ }}, we can write any Typescript expression(single line) which can resolve to a string.
               e.g referring a property, calling a function which returns a string
      -> Property Binding:
            -> Square brackets indicate to angular that we are using property binding
               e.g [disabled]="propertyName"
            -> Inside of the double quotes, we can write any TS expression same as in string interpolation
            -> we can not only bind to HTML elements but also to directives and to our own components.
      -> Event Binding:
            -> On any HTMl element, we use do (event)="TS expression". The event can all the events supported for that element.
            -> Inside of the quotation marks, $event will be the date that was emitted with the event.
               Typecasting may be needed to use the data values(HTMLInputElement)
      -> Two way data binding:
            -> With this we combine property and event binding. The syntax is also combined.
            -> e.g [(ngModel)]="TS Variable", this will trigger in the input event and update the value of the variable in our component automatically.
               Also, It will update the input value if we chnage the value of variable somewhere else.


Directives:
    -> They are instructions in the DOM. (e.g Components are directives with a template 
       i.e they tell angular to use the template based on the selector)

    -> We usually add directives with an (attribute) selector, but the selector of the directive can also be like 
       the selector of a Component. 

    -> example *ngIf
          -> The * is needed is needed because ngIf is a "structural directive" because, it changes the structure of the DOM.
             i.e it either adds the element or doesn't add it(i.e Element is not hidden)
          -> The value assigned should be any expression which returns true or false. 
          -> We can also else in ngIf using markers like *ngIf="someValuse; else myMarker"

    -> ngStyle
        -> This is an "attribute directive". They don't add or remove elements rather only change the element they were placed on
        -> e.g [ngStyle]="". The square brackets here is not the directive name. The square brackets indicate 
           that we want to bind some property on this directive and the property name is also ngStyle.
        -> This expects a JS object with style name and value. The value can also be returned from a function.
        -> It allows us to dynamically update the styles.
        **** IMPORTANT ****
        -> If a variable value is changed, event if it is not directly accessed(e.g calling a function that returns that value),
           the changes will still be reflected in the DOM.
    -> ngClass
        -> This is also an "attributive directive".
        -> [ngClass]=""
        -> This expects a JS object with class name and value. The value can also be returned from a function.
        -> It allows us to dynamically update the CSS class.
    -> ngFor
        -> This is a structural directive. This is used for looping over the element
        -> *ngFor="let server of myArrayName"

Modules:
    -> The modules are used to bundle different pieces(e.g Components) into packages.
     
    -> We need to use the decorator @NgModule to specify that the class is a module(just like component).

    -> sample module
        @NgModule({
          declarations: [
            AppComponent
          ],
          imports: [
            BrowserModule, FormsModule
          ],
          providers: [],
          bootstrap: [AppComponent]
        })
        export class AppModule { }

      declarations - is the list of all the Components available, 
      bootstrap    - has the list of components that angular need to know on starting server
      import       - used to import other modules

Angular Packages:
	-> @angular/core


Dummy notes:
1 ->	add the FormsModule  to the imports[]  array in your app.module.ts
      import { FormsModule } from '@angular/forms'; 

2 -> Updating the CLI
		 npm uninstall -g angular-cli @angular/cli 
		 npm cache clean 
		 npm install -g @angular/cli