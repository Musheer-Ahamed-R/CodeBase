Stratergy Pattern : 

	-> The strategy pattern (also known as the policy pattern) is a design pattern
	   that enables an algorithm’s behavior to be selected at runtime. The strategy pattern
		-> Defines a family of algorithms(Behaviours),
		-> encapsulates each algorithm, and
		-> makes the algorithms interchangeable within that family.
	-> Encapsulating behaviors(which may or may not be common) as a Seperate
	   Implementation(Stratergy), is known as the Strategy pattern.

	Note : 
		-> This pattern is to be used in sub-classing, when certain behaviours are not common/present across the sub-classes.   

	Implementation : 

		-> Here we rely on composition instead of inheritance for reuse. 
		-> Context is composed of a Strategy. 
		-> Instead of implementing a behavior the Context DELEGATES it to Strategy. 
		-> The context would be the class that would require changing behaviors. We
		   can change behavior dynamically. 
		-> Strategy is implemented as interface so that we can change behavior
		   without affecting our context.

	Advantages : 
	
		-> A family of algorithms can be defined as a class hierarchy and can be used
		   interchangeably to alter application behavior without changing its architecture.
		-> By encapsulating the algorithm separately, new algorithms complying with
		   the same interface can be easily introduced.
		-> The application can switch strategies at run-time.
		-> Strategy enables the clients to choose the required algorithm, without 
		   using a “switch” statement or a series of “if-else” statements.
		-> Data structures used for implementing the algorithm are completely 
		   encapsulated in Strategy classes. Therefore, the implementation of an algorithm can be changed without affecting the Context class.	   

	DisAdvantages : 

		-> The application must be aware of all the strategies to select the right
		   one for the right situation.
		-> Context and the Strategy classes normally communicate through the 
		   interface specified by the abstract Strategy base class. Strategy base class must expose interface for all the required behaviours, which some concrete Strategy classes might not implement.
		-> In most cases, the application configures the Context with the required
		   Strategy object. Therefore, the application needs to create and maintain two objects in place of one.