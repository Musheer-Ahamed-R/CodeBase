Lambdas : 
	
		-> Enables Functional Programming
		-> Write clear and consice code
		-> Easier to use Api's and Libraries
		-> Enables support for Parallel Processing
		-> Enable methods to be on their own(i.e need not be physically associated with any class or object).


		Notes :
			-> You can have multithreading on a single core machine, but you can only have parallelism on a multi core machine (or multi proc, but I 
			   treat them the same). The quick test: If on a single core machine you are using threads and it makes perfect sense for your scenario, then 
			   you are not "doing parallelism", you are just doing multithreading.

			-> Another way of putting it is that on a single core you can use threads and you can have concurrency, but to achieve parallelism on a 
			   multi-core box you have to identify in your code the exploitable concurrency: the portions of your code that can TRULY RUN at the SAME
			   TIME.  

			-> The Lambda Expressions behaves like it is an implementation of the Correcponding Functional Interface(i.e like a class which implements 
			    the functional interface).

			-> LAMBDAS ARE NOTHING BUT A BLOCK OF CODE, which if assigned to a proper Type behaves like an Implementation of that type.   
			 	i.e After they are assigned to a Type, the concept of lambda is gone and concept of Interface comes into play.

			-> Functional Interface needs to have only ONE ABSTRACT method.(Though it could have other implementation methods(default and static)).		   we can add the Annotation @FunctionalInterface to mark/enforce it as a Functional Interface.	


		Syntax : 
		
			-> (Type a, Type b) -> {
							...
							...
							return ..;
						 }	   

			-> Type infereded from Functional Interface
			
					(a, b) -> {

					          }			 

			-> Single Param (No Brackets)

					a -> {

					     }

			-> No Params

					() -> {

						  }         			  

			-> One line body(No braces)
			
					() -> ....;

			-> One line return(No Braces and return(Infered from Functional Interface))
			
					() -> return a; must be written as
					() -> a;	


		Notes : 
		
			-> Sometimes we may have to explicitly pass the type to the lambdas(case 1). This happens when the Interface has Generic Parameters.


		Exception Handling
			
			-> Exception handling can spoil the crispness of the lambda. 
			-> Thus, in this case a Wrapper method which wraps the actual lambda inside it can
			   be used. we can make it general for a specific type of functional inheritence(e.g BiConsumer Functional Interface).