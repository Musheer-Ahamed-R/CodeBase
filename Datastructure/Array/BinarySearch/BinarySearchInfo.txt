Binary Search  -  Binary Search SHOULD be ALWAYS in MIND when working with Arrays When the Array Elements are in SOME ORDER (e.g Sorted Order, Increasing then Decreasing,
                  Order Maintained between Arrays etc..) and we need to FIND/SEARCH for an Element or a Change in the Order in such an Array.

Binary Search involves two types
                  -> Find an Exact Match
                        Cases :
                           1 -> Exact Match
                           2 -> Greater Than
                           3 -> Less Than
                  -> Normal Find
                        Cases
                           1 -> Exact Match
                           2 -> Otherwise


Algorithm :

   Note : 
     -> Always use the second method even though it required extra handling

   int start = 0;
   int end = a.length-1;
   while(start <= end) {
      int mid = (start + end)/2;
      if(a[mid] SOME_CONDITION SOME_VALUE) {
         start = mid + 1;
      } else {
         end = mid - 1;
      }
   }

   Method 2 :
      This method can be used when we are not searching for a Known Specific Number.

   int start = 0;
   int end = a.length-1;
   while(start < end) {                   // Diff
      int mid = (start + end)/2;
      if(a[mid] SOME_CONDITION SOME_VALUE) {
         start = mid + 1;
      } else {
         end = mid;                       // Diff
      }
   }

   This Method Guarantees that the start and the end will be EQUAL after the While Loop.
   But, the Only Disadvantage is that the final Case(start and end are equal) should be handled after the While Loop.

   Points to Remember
      -> The start, end and mid can all be used in determining which way to go.(i.e Not just MID).
      -> There is NO NEED to Check ARRAY OUT OF BOUND for either start or mid or end.
      -> For Finding Diff between two Number, we should Always Prefer the Number to the Right of Mid(mid + 1) and Not Left to it(mid -1).
         Think about the case where only two Numbers are in the Array.((mid + 1) would work, whereas (mid - 1) wont work).
      -> If Duplicates are Present and the Array is Sorted, then also we can use Binary Search to Find the Start and the End of an Element(With Duplicates).

   Notes :
      -> Here, mid will always be NEARER or EQUAL to low, because of "Integer Division".
