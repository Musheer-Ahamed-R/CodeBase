1 -> NEVER EVER USE a value as a loop continuation condition whose value could CHANGE during ITERATION, Unless we explicitly want that behaviour.(e.g list size)

2 -> Keep the CONDITION(if condition or loop continuation condition) as simple as possible. HUGELY reduces occurrence of bugs.

3 -> In case of TWO LOOPS, USE THE PROPER INDEX IN THE PROPER PLACE(i.e use i and j in PROPER PLACES).

4 -> IT IS BETTER TO MAKE THE CODE DIRTY THAN MAKE THE LOGIC CONFUSING. Could Tremendously Reduce Occurrence of Bugs. You could make the code BETTER After Completing the Problem.

5 -> HashTable(Array) can be used to check the Presence and also useful for many manipulations(Count occurrence) of an Element in an Array. But, the
     Drawback is that we should know the MAX Range of Elements.(THUS NOT PREFERRED)

6 -> We can use a HashMap instead of a HashTable(Array) for checking occurrences or counting occurrences.

7 -> Binary Search SHOULD be ALWAYS in MIND when working with Arrays When the Array Elements are in SOME ORDER (e.g Sorted Order, Increasing then Decreasing,
     Order Maintained between Arrays etc..) and we need to FIND/SEARCH for an Element or a Change in the Order in such an Array.
     Note :
         -> If Problem is to be Solved in less Complexity than O(n), then this Should be the FIRST ALTERNATIVE.
         -> Binary Search can also be used in Array which DO NOT FOLLOW ANY ORDER. We just need to set the Condition Properly.(Condition to go Left or Right)
            (e.g Find the Peak Element.)
         -> The start, end and mid can all be used in determining which way to go.(i.e Not just MID).

8 -> If the RANGE of Elements are KNOWN(), then the Array Index can be useful(Counting Sort) in many ways.( e.g finding Element Occurrences,
     occurrence count etc..). In this case, the INDEX OF SAME ARRAY ITSELF can ALSO be used.(e.g Finding Duplicate Elements).

9 -> Use STACK if the Current Elements Presence depends on other Elements in the Array. (e.g Previous or Next Elements)

10 -> Try XOR if Array has DUPLICATE/REPEATING Values. This approach can be used to Find SINGLE UNIQUE Element or DOUBLE UNIQUE and also DUBLE DUPLICATE Elements.
      Other than these Elements, this approach DOES NOT WORK.
        -> XOR is both Commutative and ASSOCIATIVE
        -> XOR of a number with itself is 0.
        -> XOR with a Number and 0 returns the Number itself

      Note :
        -> XOR of a number with itself is 0. But, WE SHOULD NOT DEPEND ON THIS LOGIC FOR OTHER PROBLEMS.(i.e XOR of 2 and 4 equals 6, which on XOR with 6 results Zero).
           Thus, if a Number got Cancelled(While XOR'ing all Elements) it MAY NOT be a Duplicate in the List.


11 -> Try SUM of Numbers and then Manipulating (like finding DIFF between two SUM etc..)

12 -> Bit Manipulation should also be considered as a Final Alternative.(e.g All Elements N Times except 1 Element)

13 -> SLIDING WINDOW should be Used/Considered when we are Dealing with a Group of Array Elements(SUB-ARRAY) Within a "PREDEFINED" Limit or Boundary(like Sub-Array matching a Sum, Problems with Given k Value, FlipZeros(Predefined No to be Flipped) to get Max 1's etc..)

14 -> Sorting/Using Two Loops can save our day SOMETIMES. Using Two Loops in case of Sub-Array is a Bit Different. But, it could also save Sometimes.

15 -> Always be Careful when OVERWRITING a Value for a Variable. (i.e Make Sure that it is what you want).

16 -> It is Sometimes Better to Start from the FIRST Index and having the value at Zeroth Index as the Start Value.

17 -> We can Separate an Array into Three or Two Halves based on Some Criteria using the Dutch National Algorithm(or a variation of It).

18 -> Iterating Over the Array in the OPPOSITE DIRECTION of the requirement of our Problem set can help us to Solve it with a Single Iteration.(e.g Leaders in an Array).
