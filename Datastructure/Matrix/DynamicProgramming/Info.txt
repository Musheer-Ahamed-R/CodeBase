Approaches Taken For Solving Problems  -
         -> Top-down:
               -> The "top down" approach takes a High level definition of the problem and subdivides it into subproblems, which you then do recursively until you're down to pieces that are obvious and easy to code.
                  This is often associated with the "functional decomposition" style of programming, but needn't be.
               -> DIVIDE AND CONQUER Uses Top-Down(BY DEFAULT). Divide-and-conquer algorithms are naturally implemented as Recursive procedures.
               -> The Sub-Problems Need Not be Overlapping in Most of the Cases.
               -> But, If the Sub-Problems are "Overlapping", then MEMOIZATION can be Used for Optimization.
               -> e.g. First you say i'm gonna take over the world. How will i do that? You say i'm gonna take over america. How will i do that? I'm gonna take over south america first. How will i do that? I'm going to take over Brasil first. etc etc.

         -> Bottom-up:
               -> In "bottom up" programming, you identify lower-level tools that you can compose to become a bigger program. (i.e. The Lower Level Sub-Problems that are Solved will be Used for Solving Higher Level Sub-Problems.
               -> The Sub-Problems are Overlapping by Default.
               -> This is Usually Solved Iteratively.
               -> The Bottom Up Approach is Usually Called as Dynamic Programming.
               -> e.g. You say i'm gonna first take over Brasil. Then i'm gonna take over Argentina, then all other countries in south america etc etc.

Dynamic Programming Vs Divide and Conquer -
         Divide and Conquer   -
            -> Divide and Conquer works by dividing the problem into "SUB-PROBLEMS", conquer each sub-problem recursively and combine these solutions.

         MEMOIZATION          -
            -> The technique of Storing the Sub-Problem Solutions is known as Memoization.
            -> This is Helpful in case of Overlapping Sub-Problems.
            -> Memoization is a "LAZY LET IT BE APPROACH" whenever you calculate something, cache it.
            -> This can be Used in Top Down and Bottom Up Approach.
            -> If Used in Bottom Up Approach, it is Called as Dynamic Programming.
            -> If used in Top Down Approach, it also called as Dynamic Programming With Memoization.(Though Memoization is Normally Used).
            -> Memoization(Top Down Approach) avoids Solving Unnecessary Sub-Problems.

         Dynamic Programming  -
            -> Dynamic Programming is a technique for Solving problems with "OVERLAPPING SUB-PROBLEMS" using the "Bottom Up" Approach.
            -> Each Sub-Problem is solved only once and the result of each Sub-Problem is stored in a table ( generally implemented as an array or a hash table) for future references.
            -> Dynamic programming is the "SAME AS" memoization, but has one additional feature it is more ACTIVE IN THE SENSE THAT DYNAMIC PROGRAMMING
               STORES ALL THE SUB-PROBLEMS "BEFORE HAND".
            -> Technically, having an algorithm that allows you to determine what to calculate based on what you've already calculated, Since what we calculate
               might depend on the values already calculated
            -> This Solves all the Sub-Problems.(Some Sub Problems Might be Unnecessary to Calculate).

         Notes :
            -> In case of Overlapping Sub-Problems, Memoization or Dynamic Programming can be Used(based on the Use Case).
