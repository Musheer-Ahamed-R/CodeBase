1 -> Send Pair object in case of Find Diameter.

2 -> Check if a given Binary Tree is SumTree(Use Sum Tree Property).

3 -> Print in spiral form.(Remember Both methods)

4 -> Right and Left view of the tree can be also solved using recursion using a maxLevel variable(right view go from right).

5 -> Use PrintDownMethod in case of (lLevel != 0), this should be called with the opposite node.(i.e if from left call right).

6 -> Look into the perfectBinaryLevelOrderRecur method for - Perfect Binary Tree Specific Level Order Traversal.

7 -> Difference between sums of odd level and even level nodes of a Binary Tree(Diff of root - (diff upto lChild + diff upto rChild))

********
8 -> JUST USE INORDER TRSVERSAL AND A GLOBAL VARIABLE FOR CONVERT TREE TO DLL or 
	 FOR EACH NODE(Naive Approach) Use the Property of Inorder Successor and Predessor.(Incereased Time Complexity).

9 -> Print Postorder traversal from given Inorder and Preorder traversals.(Just the old post ordering way of printing).

10 -> Connect Neighbour Nodes at the same level.(Reverse Traversal)

11 -> Boundary Traversal.(Traversing Leaf nodes while traversing left and right nodes
      (StackOverflow)).

12 -> The MaxPathSum at each node can be at,
	  	-> Through the left and right child      
	  	-> Left Max + Root
	  	-> Right Max + Root
	  	-> Root alone

13 -> Complete Binary Tree using Recursive approach.

14 -> Clone a Binary Tree with Random Pointers. 

15 -> Recursive implementation of "Construct Binary Tree from given Parent Array
	  representation"