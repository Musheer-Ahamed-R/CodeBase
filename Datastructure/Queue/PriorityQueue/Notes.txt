1 -> The Priority Queue is used for getting the Element with the Highest Priority(Max value or Min value, depending on the use case).

2 -> The Elements are going to be Maintained/Ordered based on their Priority and not on their Insertion Order

Representation of Priority Queues -

                                                add                 findMin                 remove

      1 -> unordered (dynamic) array            O(1)                 O(n)                    O(n)

      2 -> unordered (dynamic) array            O(1)                 O(1)                    O(n)
           with min value Index

      3 -> dynamic array in increasing          O(n)                 O(1)                    O(n)
           order

      4 -> dynamic array in decreasing          O(n)                 O(1)                    O(1)
           order

      5 -> linked list in increasing            O(n)                 O(1)                    O(1)
           order

      6 -> unordered linked list with           O(1)                 O(1)                    O(n)
           reference to min node

      7 -> Binary Search Tree                   O(log n)             O(log n)                O(log n)         (Average time for all the cases)

      8 -> Balanced Binary Search Tree          O(log n)             O(log n)                O(log n)

      9 -> Binary Heap                          O(log n)             O(1)                O(log n)
