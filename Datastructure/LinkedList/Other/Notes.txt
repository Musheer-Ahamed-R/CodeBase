1 -> Caching a node (especially indirect hierachy of a node(node->next-> next)) while doing some operations can become TRAGIC SOMETIMES.(Caching 
	 while Swapping Adjacent nodes).

2 -> It is EXTREMELY ADVISABLE to keep both the Current Node and the Previous Node while finding/deleting/swapping etc..

3 -> Keep a HOLD on to the Current Node even if it is not necessary.(like we could manage with its previous nodes, but that could involve caching which 
	 is against Rule 1)

4 -> We can solve problems using two ways, using the 
		-> previous pointer and current pointer
		-> current pointer alone (checking for current.next)

5 -> Using the condition "curr != null and curr.next != null" can be useful in cases where we have split the list.(curr.next.next is also used sometimes).

6 -> In some cases where an action needs to happen after a specific point and continue to happen after that(e.g Delete from end). In this case, we may 	
	 have to check the condition from where it has to start as seperately.

7 -> Always look for possiblity of changing links in cases where we have to putting elements one after the after.(e.g ShiftNodes/Rotate)

8 -> When we are populating a new list( or lists) from an actual list based on some criteria(new list of even numbers), it is MANDATORY to set the NEXT 
	 of the new list to NULL.(Otherwise, it could cause some trouble in the end).

