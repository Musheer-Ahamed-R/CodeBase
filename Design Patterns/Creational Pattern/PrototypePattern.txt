Protype Pattern : 

	-> Creating new Objects by cloning(copying) other objects, rather than creating a 
	   new instance from scratch, something that may include costly operations.
	-> Prototype patterns is required, when object creation is time consuming, and 
	   costly operation, so we create object with existing object itself.


	When to use : 
		-> When instances of a class can have one of only a few different 
		   combinations of state. It may be more convenient to install a 
		   corresponding number of prototypes and clone them rather than
		   instantiating the class manually, each time with the appropriate state.

   Notes : 
   		-> This pattern involves storing(usually in a map) a known number of Prototypes(with different states), so that they can be cloned at run time.
   		-> This can be used with Stratergy Pattern and in many other cases

   Advantages : 
   		-> Adding and removing products/prototypes at run-time 		

   Diaadvantages : 
   		-> Overkill for a project that uses very few objects and/or does not 
   		   have an underlying emphasis on the extension of prototype chains.
		-> It also hides concrete product classes from the client
		-> Each subclass of Prototype must implement the clone() operation
		   which may be difficult, when the classes under consideration already
		   exist. Also implementing clone() can be difficult when their
		   internals include objects that donâ€™t support copying or have 
		   circular references.